import sets.subset sets.set_axioms hott.types.prod 

universes u v w
hott_theory

namespace hott
open set subset prod trunc sum

set_option pp.universes true

/- `‚äÜ` induces a weak or partial order on the subsets of a set `A`:
   It is a reflexive, transitive and anti-symmetric relation. -/
@[hott, hsimp]
def subset_refl {A : Set} (B : Subset A) : B ‚äÜ B :=
  assume a a_in_B, a_in_B

@[hott, hsimp]
def subset_trans {A : Set} (B C D : Subset A) : 
  B ‚äÜ C -> C ‚äÜ D -> B ‚äÜ D :=
assume BC CD a a_in_B, CD a (BC a a_in_B)

@[hott, hsimp]
def subset_asymm {A : Set} (B C : Subset A) : 
  B ‚äÜ C -> C ‚äÜ B -> B = C :=
assume BC CB, (sset_eq_iff_inclusion B C).2 ‚ü®BC, CB‚ü©  

namespace subset
variables {A : Set.{u}}

@[hott, reducible]
protected def inter (S‚ÇÅ S‚ÇÇ : Subset A) : Subset A :=
{a ‚àà A | a ‚àà S‚ÇÅ and a ‚àà S‚ÇÇ}

hott_theory_cmd "local infixl  ` ‚à© `:80      := hott.subset.inter"

@[hott]
def elem_inter_iff (U : Subset.{u v} A) (V : Subset.{u w} A): 
  Œ† (a : A), a ‚àà (U ‚à© V) <-> (a ‚àà U and a ‚àà V) :=
begin
  intro a, apply pair,
  { intro el, exact (pred_elem.{u (max v w)} a).1 el },
  { intro and_el, exact (pred_elem.{u (max v w)} a).2 and_el }
end  

@[hott]
def elem_inter_eq (U V : Subset A) : 
  Œ† (a : A), a ‚àà (U ‚à© V) = (a ‚àà U and a ‚àà V) :=
Œª a, prop_iff_eq (elem_inter_iff U V a).1 (elem_inter_iff U V a).2  

@[hott]
def inter.symm (S‚ÇÅ : Subset.{u v} A) (S‚ÇÇ : Subset.{u w} A) : S‚ÇÅ ‚à© S‚ÇÇ = S‚ÇÇ ‚à© S‚ÇÅ :=
  have ss1 : S‚ÇÅ ‚à© S‚ÇÇ ‚äÜ S‚ÇÇ ‚à© S‚ÇÅ, from 
    assume a el, 
    have p : a ‚àà S‚ÇÅ and a ‚àà S‚ÇÇ, from (pred_elem.{u (max v w)} a).1 el,
    have q : a ‚àà S‚ÇÇ and a ‚àà S‚ÇÅ, from ‚ü®p.2, p.1‚ü©,
    (pred_elem.{u (max v w)} a).2 q,
  have ss2 : S‚ÇÇ ‚à© S‚ÇÅ ‚äÜ S‚ÇÅ ‚à© S‚ÇÇ, from 
    assume a el, 
    have p : a ‚àà S‚ÇÇ and a ‚àà S‚ÇÅ, from (pred_elem.{u (max v w)} a).1 el,
    have q : a ‚àà S‚ÇÅ and a ‚àà S‚ÇÇ, from ‚ü®p.2, p.1‚ü©,
    (pred_elem.{u (max v w)} a).2 q,
  (sset_eq_iff_inclusion _ _).2 ‚ü®ss1, ss2‚ü©

@[hott]
def inter_sset_l (U : Subset.{u v} A) (V : Subset.{u w} A) : U ‚à© V ‚äÜ U :=
  assume a el, 
  have p : a ‚àà U and a ‚àà V, from (pred_elem.{u (max v w)} a).1 el,
  p.1

@[hott]
def inter_sset_r (U V : Subset A) : is_Subset_of (U ‚à© V) V :=
  by rwr inter.symm U V; exact inter_sset_l V U  

@[hott, reducible]
def sInter (S : Subset (ùí´ A)) : Subset A := 
  {t ‚àà A | prop_resize (to_Prop (‚àÄ B : ùí´ A, B ‚àà S -> t ‚àà B))}

hott_theory_cmd "local prefix `‚ãÇ‚ÇÄ`:110 := hott.subset.sInter"

@[hott]
def sInter_sset {A : Set} (S : Subset (ùí´ A)) : 
  ‚àÄ B : ùí´ A, B ‚àà S -> ‚ãÇ‚ÇÄ S ‚äÜ B :=
assume B elB a ela, prop_resize_to_prop ((pred_elem a).1 ela) B elB 

@[hott]
def sset_sInter {A : Set} (S : Subset (ùí´ A)) (B : ùí´ A) : 
  (‚àÄ C : ùí´ A, C ‚àà S -> B ‚äÜ C) -> B ‚äÜ ‚ãÇ‚ÇÄ S :=
begin  
  intros allBC a ela, apply (pred_elem a).2, apply prop_to_prop_resize,
  intros C elC, exact allBC C elC a ela
end    

@[hott, reducible]
def iInter {A : Set} {I : Set} (f : I -> ùí´ A) : Subset A :=
  {t ‚àà A | to_Prop (‚àÄ i : I, t ‚àà f i) }

hott_theory_cmd "local prefix `‚ãÇ·µ¢`:110 := hott.subset.iInter"  

@[hott]
def sset_iInter {A : Set} {I : Set} (f : I -> ùí´ A) (i : I) : 
  (‚ãÇ·µ¢ f) ‚äÜ (f i):=
begin intros a el, exact (pred_elem a).1 el i end  

@[hott, reducible]
protected def union (S‚ÇÅ S‚ÇÇ : Subset A) : Subset A :=
{a ‚àà A | a ‚àà S‚ÇÅ or a ‚àà S‚ÇÇ}

hott_theory_cmd "local infixl  ` ‚à™ `:80      := hott.subset.union"

@[hott]
def union.symm (S‚ÇÅ : Subset.{u v} A) (S‚ÇÇ : Subset.{u w} A) : S‚ÇÅ ‚à™ S‚ÇÇ = S‚ÇÇ ‚à™ S‚ÇÅ :=
  have ss1 : S‚ÇÅ ‚à™ S‚ÇÇ ‚äÜ S‚ÇÇ ‚à™ S‚ÇÅ, from 
    assume a el, 
    have p : a ‚àà S‚ÇÅ or a ‚àà S‚ÇÇ, from (pred_elem.{u (max v w)} a).1 el,
    have q : a ‚àà S‚ÇÇ or a ‚àà S‚ÇÅ, from or_symm p,
    (pred_elem.{u (max v w)} a).2 q,
  have ss2 : S‚ÇÇ ‚à™ S‚ÇÅ ‚äÜ S‚ÇÅ ‚à™ S‚ÇÇ, from 
    assume a el, 
    have p : a ‚àà S‚ÇÇ or a ‚àà S‚ÇÅ, from (pred_elem.{u (max v w)} a).1 el,
    have q : a ‚àà S‚ÇÅ or a ‚àà S‚ÇÇ, from or_symm p,
    (pred_elem.{u (max v w)} a).2 q,
  (sset_eq_iff_inclusion _ _).2 ‚ü®ss1, ss2‚ü©

@[hott]
def union_sset_l (U : Subset.{u v} A) (V : Subset.{u w} A): U ‚äÜ U ‚à™ V:=
begin intros a el, apply (pred_elem.{u (max v w)} a).2, exact or_inl (a ‚àà U) (a ‚àà V) el end

@[hott]
def union_sset_r (U V : Subset A) : V ‚äÜ U ‚à™ V :=
  by rwr union.symm U V; exact union_sset_l V U 

@[hott, reducible]
def sUnion (S : Subset (ùí´ A)) : Subset A := 
  {t ‚àà A | prop_resize (‚àÉ B ‚àà S, t ‚àà B)}

hott_theory_cmd "local prefix `‚ãÉ‚ÇÄ`:110 := hott.subset.sUnion"

@[hott, reducible]
def iUnion {A : Set} {I : Set} (f : I -> ùí´ A) : Subset A :=
  {t ‚àà A | ‚à• Œ£ i : I, t ‚àà f i ‚à•}

hott_theory_cmd "local prefix `‚ãÉ·µ¢`:110 := hott.subset.iUnion"  

#print hott.subset.Powerset

@[hott]
def sset_iUnion {A : Set.{u}} {I : Set.{v}} (f : I -> ùí´ A) (i : I) : 
  (f i) ‚äÜ (‚ãÉ·µ¢ f) :=
begin intros a el, exact (pred_elem a).2 (@trunc.tr -1 (Œ£ i : I, a ‚àà f i) ‚ü®i, el‚ü©) end

@[hott]
def iUnion_sset {A : Set} {I : Set} (f : I -> ùí´ A) (B : Subset A) :
  (‚àÄ i : I, f i ‚äÜ B) -> ‚ãÉ·µ¢ f ‚äÜ B :=
begin
  intros Iss a ela, let exi := (pred_elem a).1 ela, hinduction exi with elai,
  exact Iss elai.1 a elai.2
end    

@[hott]
def complement (U : Subset A) : Subset A :=
  {x ‚àà A | x ‚àâ U}

notation `C(`U`) ` := complement U  

@[hott]
def elem_comp_iff (U : Subset A) : Œ† a : A, a ‚àà C(U) <-> a ‚àâ U :=
begin 
  intro a, apply pair, 
  { intro el, exact (pred_elem a).1 el },
  { intro not_el, exact (pred_elem a).2 not_el }
end    

@[hott]
def elem_comp_eq (U : Subset A) : Œ† a : A, a ‚àà C(U) = a ‚àâ U :=
  Œª a, prop_iff_eq (elem_comp_iff U a).1 (elem_comp_iff U a).2

@[hott]
def compl_total_empty : C(total_Subset A) = empty_Subset A :=
begin
  apply (sset_eq_iff_inclusion _ _).2, apply pair,
  { intros a el, rwr elem_comp_eq _ a at el, 
    hinduction (el (all_elem a)) },
  { intros a el, hinduction empty_not_elem a el }
end   

@[hott]
def compl_inter (U V : Subset A) : C(U ‚à© V) = C(U) ‚à™ C(V) :=
begin
  apply (sset_eq_iff_inclusion _ _).2, apply pair,
  { intros x el, apply (pred_elem x).2, 
    have not_el_inter : ‚Ü•(x ‚àâ (U ‚à© V)), from (pred_elem x).1 el,
    rwr elem_comp_eq, rwr elem_comp_eq, 
    apply (not_and (x‚ààU) (x‚ààV)).1, rwr <- elem_inter_eq, assumption },
  { intros x el, apply (elem_comp_iff (U ‚à© V) x).2, 
    intro el', 
    have not_el_or : ‚Ü•(x‚ààC(U) or x‚ààC(V)), from (pred_elem x).1 el,
    rwr elem_comp_eq at not_el_or, rwr elem_comp_eq at not_el_or, 
    exact (not_and (x‚ààU) (x‚ààV)).2 not_el_or ((pred_elem x).1 el') }
end 

@[hott]
def compl_iUnion {I : Set} (f : I -> ùí´ A) : C(‚ãÉ·µ¢ f) = ‚ãÇ·µ¢ (Œª i, C(f i)) :=
begin  
  apply (sset_eq_iff_inclusion _ _).2, apply pair,
  { intros x el, apply (pred_elem x).2, 
    change Œ† (i : I), x‚ààC(f i), intro i, apply (elem_comp_iff (f i) x).2, 
    intro el_i, apply (elem_comp_iff (‚ãÉ·µ¢ f) x).1 el,
    apply (pred_elem x).2, exact tr ‚ü®i, el_i‚ü© },
  { intros x el, apply (pred_elem x).2, intro el_Ui, 
    have i_el : Œ† i : I, x‚ààC(f i), from (pred_elem x).1 el,
    hinduction (pred_elem x).1 el_Ui with el_i, 
    exact (elem_comp_iff (f a.1) x).1 (i_el a.1) a.2 }
end  

end subset

end hott