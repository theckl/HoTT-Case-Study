import sets.algebra init2 sets.axioms sets.theories categories.basic categories.limits

universes v v' u u' w 
hott_theory

namespace hott
open hott.eq hott.sigma hott.set hott.subset hott.is_trunc hott.is_equiv hott.equiv 
     hott.categories hott.categories.limits

namespace categories

/- We define multi-sorted stamdard structures on categories and prove the Structure 
   Identity Principle, following and generalizing the [HoTT-Book], Section 9.8.  -/
@[hott]
structure std_structure_on (C : Type u) [category.{v} C] :=
  (S : Set)   --the set of sorts of the structure
  (P : (S -> C) -> Type w)
  (H : Œ† {s t : S -> C} (Œ± : P s) (Œ≤ : P t) (f : Œ† (x : S), s x ‚ü∂ t x), 
                                                                trunctype.{0} -1)
  (id_H : ‚àÄ {s : S -> C} (Œ± : P s), H Œ± Œ± (Œª x : S, ùüô (s x)))
  (comp_H : ‚àÄ {s t u : S -> C} (Œ± : P s) (Œ≤ : P t) (Œ≥ : P u) (f : Œ† x : S, s x ‚ü∂ t x) 
              (g : Œ† x : S, t x ‚ü∂ u x), 
              H Œ± Œ≤ f -> H Œ≤ Œ≥ g -> H Œ± Œ≥ (Œª x : S, f x ‚â´ g x))
  (std : ‚àÄ {s : S ->C} (Œ± Œ≤ : P s), 
           (H Œ± Œ≤ (Œª x : S, ùüô (s x)) √ó H Œ≤ Œ± (Œª x : S, ùüô (s x))) ‚âÉ Œ± = Œ≤)           

@[hott]
structure std_structure {C : Type u} [category.{v} C] (std_str : std_structure_on C) := 
  (carrier : std_str.S -> C)
  (str : std_str.P carrier)  

@[hott]
instance {C : Type u} [category.{v} C] (std_str : std_structure_on C) : 
  has_coe (std_structure std_str) (std_str.S -> C) :=
‚ü®Œª x : std_structure std_str, x.carrier‚ü©  

@[hott]
def std_str_eta {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  (x : std_structure std_str) : x = std_structure.mk x.carrier x.str :=
begin hinduction x, refl end  

@[hott, instance]
def std_str_is_set {C : Type u} [category.{v} C] (std_str : std_structure_on C) :
  ‚àÄ s : std_str.S -> C, is_set (std_str.P s) :=
assume s, 
have eq_eq : ‚àÄ (Œ± Œ≤ : std_str.P s), is_prop (Œ± = Œ≤), from 
  assume Œ± Œ≤, is_trunc_equiv_closed -1 (std_str.std Œ± Œ≤) (prod.is_trunc_prod _ _ -1),
is_trunc_succ_intro eq_eq 

@[hott, instance]
def std_str_po_is_prop {C : Type u} [category.{v} C] (std_str : std_structure_on C)
  {s t : std_str.S -> C} {Œ± : std_str.P s} {Œ≤ : std_str.P t} :
  ‚àÄ p : s = t, is_prop (Œ± =[p] Œ≤) :=
begin 
  intro p, hinduction p, 
  apply is_trunc_equiv_closed_rev -1 (pathover_idp _ Œ± Œ≤), 
  exact is_prop.mk (@is_set.elim _ _ Œ± Œ≤)
end   

/- Equalities like these should be produced automatically. -/
@[hott]
def ap_apd011_str {C : Type u} [category.{v} C] {std_str : std_structure_on C} 
  {s t : std_str.S -> C} {Œ± : std_str.P s} {Œ≤ : std_str.P t} : ‚àÄ (p : s = t) (q : Œ± =[p] Œ≤), 
                     ap std_structure.carrier (apd011 std_structure.mk p q) = p :=
begin intros p q, hinduction p, hinduction q, refl end 

@[hott]
def apd011_ap_str {C : Type u} [category.{v} C] {std_str : std_structure_on C} 
  {x y : std_structure std_str} : ‚àÄ p : x = y, 
  apd011 std_structure.mk (ap std_structure.carrier p)
         (pathover_ap std_str.P std_structure.carrier (apd std_structure.str p)) = 
  (std_str_eta x)‚Åª¬π ‚¨ù p ‚¨ù (std_str_eta y) :=
begin intro p, hinduction p, hinduction x, refl end  

/- As a first step, we need to construct the structure of a precategory on the standard 
   structures. -/
@[hott, instance]
def std_str_has_hom {C : Type u} [category.{v} C] (std_str : std_structure_on C) :
  has_hom (std_structure std_str) := 
has_hom.mk (Œª (str‚ÇÅ str‚ÇÇ : std_structure std_str), 
            pred_Set (Œª f : to_Set (Œ† x : std_str.S, (str‚ÇÅ.carrier x ‚ü∂ str‚ÇÇ.carrier x)), 
                       std_str.H (str‚ÇÅ.str) (str‚ÇÇ.str) f))

@[hott]
instance hom_std_C {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} : 
  has_coe ‚Ü•(str‚ÇÅ ‚ü∂ str‚ÇÇ) (Œ† x : std_str.S, (str‚ÇÅ.carrier x ‚ü∂ str‚ÇÇ.carrier x)) :=
‚ü®Œª f : str‚ÇÅ ‚ü∂ str‚ÇÇ, pred_Set_map _ f‚ü©  

@[hott]
def hom_H {C : Type u} [category.{v} C] {std_str : std_structure_on C} 
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} :
  Œ† f : str‚ÇÅ ‚ü∂ str‚ÇÇ, std_str.H str‚ÇÅ.str str‚ÇÇ.str (‚Üëf) :=
begin intro f, exact f.2 end              

@[hott]
def hom_eq_C_std {C : Type u} [category.{v} C] {std_str : std_structure_on C} 
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} (f g : str‚ÇÅ ‚ü∂ str‚ÇÇ) : 
  (f.1 = (g.1 : Œ† x : std_str.S, (str‚ÇÅ.carrier x ‚ü∂ str‚ÇÇ.carrier x))) -> (f = g) :=
assume (hom_eq_C : f.1 = g.1), 
have H_eq : f.2 =[hom_eq_C; (Œª f : to_Set (Œ† x : std_str.S, (str‚ÇÅ.carrier x ‚ü∂ str‚ÇÇ.carrier x)), 
                       std_str.H (str‚ÇÅ.str) (str‚ÇÇ.str) f)] g.2, from 
  pathover_prop_eq _ hom_eq_C (hom_H f) (hom_H g),
calc f = ‚ü®f.1, f.2‚ü© : (sigma.eta f)‚Åª¬π 
   ... = ‚ü®g.1, g.2‚ü© : dpair_eq_dpair hom_eq_C H_eq
   ... = g : sigma.eta g 

@[hott, instance]
def std_str_cat_struct {C : Type u} [category.{v} C] (std_str : std_structure_on C) :
  category_struct (std_structure std_str) :=
category_struct.mk (Œª str : std_structure std_str, 
                            ‚ü®Œª x : std_str.S, ùüô (str.carrier x), std_str.id_H str.str‚ü©) 
  (Œª (str‚ÇÅ str‚ÇÇ str‚ÇÉ : std_structure std_str) (f : str‚ÇÅ ‚ü∂ str‚ÇÇ) (g : str‚ÇÇ ‚ü∂ str‚ÇÉ), 
     ‚ü®(Œª x : std_str.S, (f : Œ† x : std_str.S, (str‚ÇÅ.carrier x ‚ü∂ str‚ÇÇ.carrier x)) x ‚â´ g.1 x), 
                        std_str.comp_H str‚ÇÅ.str str‚ÇÇ.str str‚ÇÉ.str ‚Üëf ‚Üëg (hom_H f) (hom_H g)‚ü©) 

@[hott]
def idhom_std_C {C : Type u} [category.{v} C] {std_str : std_structure_on C} 
  (str : std_structure std_str) : ‚Üë(ùüô str) = Œª x, ùüô (str.carrier x) :=
rfl  

@[hott]
def comp_hom_std_C {C : Type u} [category.{v} C] {std_str : std_structure_on C} 
  {str‚ÇÅ str‚ÇÇ str‚ÇÉ : std_structure std_str} (f : str‚ÇÅ ‚ü∂ str‚ÇÇ) (g : str‚ÇÇ ‚ü∂ str‚ÇÉ) : 
  (f ‚â´ g).1 = Œª x : std_str.S, f.1 x ‚â´ g.1 x :=
rfl  

@[hott, instance]
def std_str_precategory {C : Type u} [category.{v} C] (std_str : std_structure_on C) :
  precategory (std_structure std_str) :=
have ic : ‚àÄ (str‚ÇÅ str‚ÇÇ : std_structure std_str) (f : str‚ÇÅ ‚ü∂ str‚ÇÇ), ùüô str‚ÇÅ ‚â´ f = f, from 
begin 
  intros str‚ÇÅ str‚ÇÇ f, apply hom_eq_C_std _ _, rwr comp_hom_std_C, 
  apply eq_of_homotopy, intro x, hsimp 
end,
have ci : ‚àÄ (str‚ÇÅ str‚ÇÇ : std_structure std_str) (f : str‚ÇÅ ‚ü∂ str‚ÇÇ), f ‚â´ ùüô str‚ÇÇ = f, from 
begin 
  intros str‚ÇÅ str‚ÇÇ f, apply hom_eq_C_std _ _, rwr comp_hom_std_C, 
  apply eq_of_homotopy, intro x, hsimp 
end,
have as : ‚àÄ (str‚ÇÅ str‚ÇÇ str‚ÇÉ str‚ÇÑ: std_structure std_str) (f : str‚ÇÅ ‚ü∂ str‚ÇÇ) (g : str‚ÇÇ ‚ü∂ str‚ÇÉ) 
            (h : str‚ÇÉ ‚ü∂ str‚ÇÑ), (f ‚â´ g) ‚â´ h = f ‚â´ (g ‚â´ h), from 
begin 
  intros x y z w f g h, apply hom_eq_C_std _ _, repeat { rwr comp_hom_std_C }, 
  apply eq_of_homotopy, intro x, hsimp 
end,
precategory.mk ic ci as 

/- We prove the Structure Identity principle by splitting up the equivalence making the 
   precategory into a category into 5 equivalence and by showing that the composition of the
   5 equivalence maps is `idtoiso`. 

   The first equivalence introduces the structure components in standard structures equalities. -/
@[hott]
def std_str_comp_eq {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} :
  (str‚ÇÅ = str‚ÇÇ) ‚âÉ 
          (std_structure.mk str‚ÇÅ.carrier str‚ÇÅ.str = std_structure.mk str‚ÇÇ.carrier str‚ÇÇ.str) :=
begin hinduction str‚ÇÅ with s Œ±, hinduction str‚ÇÇ with t Œ≤, exact equiv.rfl end

/- The second equivalence is the eta principle for standard structures equalities. -/
@[hott]
def std_str_eq_eta {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {s t : std_str.S -> C} {Œ± : std_str.P s} {Œ≤ : std_str.P t} :
  (std_structure.mk s Œ± = std_structure.mk t Œ≤) ‚âÉ Œ£ (p : s = t), Œ± =[p] Œ≤ :=
let str‚ÇÅ := std_structure.mk s Œ±, str‚ÇÇ := std_structure.mk t Œ≤,
    f := Œª p : str‚ÇÅ = str‚ÇÇ, @dpair (s = t) (Œª p : s = t, Œ± =[p] Œ≤) 
         (ap std_structure.carrier p : s = t) 
         (pathover_ap std_str.P std_structure.carrier (apd std_structure.str p)),
    g := Œª pq : Œ£ (p : s = t), Œ± =[p] Œ≤, apd011 std_structure.mk pq.1 pq.2 in                         
have rinv : ‚àÄ pq : Œ£ (p : s = t), Œ± =[p] Œ≤, f (g pq) = pq, from 
  assume pq,
  have pq_1 : (f (g pq)).1 = pq.1, from 
    calc (f (g pq)).1 = ap std_structure.carrier (apd011 std_structure.mk pq.1 pq.2) : rfl
         ... = pq.1 : ap_apd011_str pq.1 pq.2,
  have pq_2 : (f (g pq)).2 =[pq_1; Œª p : s = t, Œ± =[p] Œ≤] pq.2, from po_proofs pq_1 _ _,
  calc f (g pq) = ‚ü®(f (g pq)).1, (f (g pq)).2‚ü© : sigma.eta (f (g pq))
       ... = ‚ü®pq.1, pq.2‚ü© : apd011 sigma.mk pq_1 pq_2
       ... = pq : sigma.eta pq,
have linv : ‚àÄ p : str‚ÇÅ = str‚ÇÇ, g (f p) = p, from 
  assume p,
  have qx : std_str_eta str‚ÇÅ = idp, from rfl,
  calc g (f p) = apd011 std_structure.mk (ap std_structure.carrier p) (f p).2 : rfl
       ... = (std_str_eta str‚ÇÅ)‚Åª¬π ‚¨ù p ‚¨ù (std_str_eta str‚ÇÇ) : apd011_ap_str p
       ... = p : by rwr qx; rwr idp_inv; rwr idp_con p; rwr con_idp p,
equiv.mk f (adjointify f g rinv linv)    

/- The third equivalence exchanges equalities and isomorphisms. -/
@[hott]
def strpair_id_to_iso {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {s t : std_str.S -> C} {Œ± : std_str.P s} {Œ≤ : std_str.P t} :
  (Œ£ (p : s = t), Œ± =[p] Œ≤) ‚âÉ (Œ£ (f : Œ† x, s x ‚âÖ t x), std_str.H Œ± Œ≤ (Œª x, (f x).hom) and 
                                                        std_str.H Œ≤ Œ± (Œª x, (f x).inv)) :=
begin                                                        
  let str‚ÇÅ := std_structure.mk s Œ±, let str‚ÇÇ := std_structure.mk t Œ≤, 
  have po_hom : Œ† (p : s = t) (q : Œ± =[p] Œ≤), std_str.H Œ± Œ≤ (Œª x, (idtoiso (ap10 p x)).hom) and 
                                              std_str.H Œ≤ Œ± (Œª x, (idtoiso (ap10 p x)).inv), from 
  begin 
    intros p q, hinduction p, 
    have q' : Œ± = Œ≤, from eq_of_pathover_idp q, 
    have r : (Œª x : std_str.S, (idtoiso (ap10 (@idp _ s) x)).hom) = 
              Œª x : std_str.S, ùüô (s x), from rfl,
    have r' : (Œª x : std_str.S, (idtoiso (ap10 (@idp _ s) x)).inv) = 
               Œª x : std_str.S, ùüô (s x), from rfl,         
    rwr r, rwr r', rwr <- q', exact (std_str.id_H Œ±, std_str.id_H Œ±) 
  end,
  have idtoiso_hom_po : ‚àÄ p : s = t, std_str.H Œ± Œ≤ (Œª x, (idtoiso (ap10 p x)).hom) and 
                            std_str.H Œ≤ Œ± (Œª x, (idtoiso (ap10 p x)).inv) -> Œ± =[p] Œ≤, from
    begin intros p H, hinduction p, apply pathover_idp_of_eq, exact std_str.std Œ± Œ≤ H end,
  have hom_po : Œ† (f : Œ† x, s x ‚âÖ t x), (std_str.H Œ± Œ≤ (Œª x, (f x).hom) and 
                  std_str.H Œ≤ Œ± (Œª x, (f x).inv)) -> 
                  Œ± =[eq_of_homotopy (Œª x, category.isotoid (f x))] Œ≤, from 
    assume f H,
    have r : f = Œª x, idtoiso (ap10 (eq_of_homotopy (Œª x, category.isotoid (f x))) x), from
      begin 
        apply eq_of_homotopy, intro x, change f x = idtoiso (apd10 _ x),
        rwr apd10_eq_of_homotopy, change _ = idtoiso (idtoiso‚Åª¬π·∂† (f x)), 
        rwr category.idtoiso_rinv (f x) 
      end, 
    begin 
      apply idtoiso_hom_po, 
      rwr <- eq_of_homotopy (Œª x, ap iso.hom (apd10 r x)), 
      rwr <- eq_of_homotopy (Œª x, ap iso.inv (apd10 r x)), exact H 
    end, 
  let F := Œª (pq : Œ£ (p : s = t), Œ± =[p] Œ≤), @dpair (Œ† x, s x ‚âÖ t x) 
    (Œª f : Œ† x, s x ‚âÖ t x, std_str.H Œ± Œ≤ (Œª x, (f x).hom) and std_str.H Œ≤ Œ± (Œª x, (f x).inv)) 
    (Œª x, idtoiso (ap10 pq.1 x)) (po_hom pq.1 pq.2),  
  let G := Œª iso_H : (Œ£ (f : Œ† x, s x ‚âÖ t x), std_str.H Œ± Œ≤ (Œª x, (f x).hom) and 
                       std_str.H Œ≤ Œ± (Œª x, (f x).inv)), @dpair (s = t) (Œª p : s = t, Œ± =[p] Œ≤) 
                (eq_of_homotopy (Œª x, category.isotoid (iso_H.1 x))) (hom_po iso_H.1 iso_H.2),
  have rinv : ‚àÄ iso_H, F (G iso_H) = iso_H, from 
  begin
    intro iso_H, fapply sigma_eq,
    { apply eq_of_homotopy, intro x, 
      change idtoiso (apd10 _ x) = iso_H.1 x, rwr apd10_eq_of_homotopy,
      change idtoiso (idtoiso‚Åª¬π·∂† (iso_H.1 x)) = iso_H.1 x,
      exact category.idtoiso_rinv (iso_H.1 x) },
    { apply pathover_of_eq_tr, exact is_prop.elim _ _ }
  end,
  have linv : ‚àÄ (pq : Œ£ (p : s = t), Œ± =[p] Œ≤), G (F pq) = pq, from 
  begin
    intro pq, hinduction pq.1 with h,
    fapply sigma_eq,
    { change (eq_of_homotopy (Œª x, idtoiso‚Åª¬π·∂† (idtoiso (apd10 pq.1 x)))) = _,  
      have r : Œ† x, apd10 pq.1 x = @idp _ (s x), from begin intro x, rwr h end, 
      have q : (Œª x, idtoiso‚Åª¬π·∂† (idtoiso (apd10 pq.1 x))) = Œª x, (@idp _ (s x)), from 
      begin 
        apply eq_of_homotopy, intro x, change idtoiso‚Åª¬π·∂† (idtoiso (apd10 pq.1 x)) = _,
        rwr r x, rwr category.idtoiso_linv ((@idp _ (s x)))
      end,  
      rwr q, rwr h, rwr eq_of_homotopy_idp }, 
    { apply pathover_of_eq_tr, exact is_prop.elim _ _ }, 
  end,                                                             
  exact equiv.mk F (adjointify F G rinv linv) 
end

/- The fourth equivalence splits up equalities of standard structure isomorphisms. -/
@[hott]
def iso_std_C {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} (F : str‚ÇÅ ‚âÖ str‚ÇÇ) : Œ† x, str‚ÇÅ.carrier x ‚âÖ str‚ÇÇ.carrier x :=
let f := (F.hom : str‚ÇÅ ‚ü∂ str‚ÇÇ).1, g := F.inv.1 in
have rinv : Œ† x, (g x) ‚â´ (f x) = ùüô (str‚ÇÇ.carrier x), 
  begin intro x, change (F.inv ‚â´ F.hom).1 x = _, rwr F.r_inv end,
have linv : Œ† x, (f x) ‚â´ (g x) = ùüô (str‚ÇÅ.carrier x), 
  begin intro x, change (F.hom ‚â´ F.inv).1 x = _, rwr F.l_inv end, 
assume x, iso.mk (f x) (g x) (rinv x) (linv x)  

@[hott]
def str_iso_eq_comp {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {s t : std_str.S -> C} {Œ± : std_str.P s} {Œ≤ : std_str.P t} :
  (Œ£ (f : Œ† x, s x ‚âÖ t x), std_str.H Œ± Œ≤ (Œª x, (f x).hom) and std_str.H Œ≤ Œ± (Œª x, (f x).inv)) ‚âÉ 
  (std_structure.mk s Œ± ‚âÖ std_structure.mk t Œ≤) :=
begin
  let str‚ÇÅ := std_structure.mk s Œ±, let str‚ÇÇ := std_structure.mk t Œ≤,
  fapply equiv.mk,
  /- We define `F : (Œ£ (f : Œ† x, s x ‚âÖ t x), std_str.H Œ± Œ≤ (Œª x, (f x).hom) and`
                                            `std_str.H Œ≤ Œ± (Œª x, (f x).inv)) -> (str‚ÇÅ ‚âÖ str‚ÇÇ)`. -/
  { intro iso_H, 
    fapply iso.mk,
    { exact ‚ü®Œª x, (iso_H.1 x).hom, iso_H.2.1‚ü© },
    { exact ‚ü®Œª x, (iso_H.1 x).inv, iso_H.2.2‚ü© },
    { apply hom_eq_C_std _ _, repeat { rwr comp_hom_std_C }, hsimp, 
      apply eq_of_homotopy, intro x, hsimp, rwr (iso_H.1 x).r_inv },
    { apply hom_eq_C_std _ _, repeat { rwr comp_hom_std_C }, hsimp, 
      apply eq_of_homotopy, intro x, hsimp, rwr (iso_H.1 x).l_inv } },
  { fapply adjointify,
    /- Now we define `G : (str‚ÇÅ ‚âÖ str‚ÇÇ) -> (Œ£ (f : Œ† x, s x ‚âÖ t x), std_str.H Œ± Œ≤ (Œª x, (f x).hom) and`
                                            `std_str.H Œ≤ Œ± (Œª x, (f x).inv))`. -/
    { intro f, 
      fapply sigma.mk,
      { exact iso_std_C f },
      { exact (f.hom.2, f.inv.2) } },
    /- `r_inv : ‚àÄ f : str‚ÇÅ ‚âÖ str‚ÇÇ, F (G f) = f` -/  
    { intro f,
      apply hom_eq_to_iso_eq, apply hom_eq_C_std _ _, 
      hsimp, refl },
    /- `l_inv : ‚àÄ iso_H : (Œ£ (f : Œ† x, s x ‚âÖ t x), std_str.H Œ± Œ≤ (Œª x, (f x).hom) and`
                                            `std_str.H Œ≤ Œ± (Œª x, (f x).inv)), G (F iso_H)) = iso_H` -/  
    { intro iso_H, 
      fapply sigma_eq, 
      { apply eq_of_homotopy, intro x, apply hom_eq_to_iso_eq, refl },
      { apply pathover_of_eq_tr, exact is_prop.elim _ _ } } }
end    

/- The last equivalence introduces the structure components in standard structures isomorphies. -/
@[hott]
def std_str_comp_iso {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} :
  (str‚ÇÅ ‚âÖ str‚ÇÇ) ‚âÉ (std_structure.mk str‚ÇÅ.carrier str‚ÇÅ.str ‚âÖ std_structure.mk str‚ÇÇ.carrier str‚ÇÇ.str) :=
begin hinduction str‚ÇÅ with s Œ±, hinduction str‚ÇÇ with t Œ≤, exact equiv.rfl end

/- Finally, we show that the composition of the five equivalences is `idtoiso`. -/
@[hott]
def comp_eqv_idtoiso {C : Type u} [category.{v} C] {std_str : std_structure_on C}
  {str‚ÇÅ str‚ÇÇ : std_structure std_str} (p : str‚ÇÅ = str‚ÇÇ) :
        (std_str_comp_iso.to_fun‚Åª¬π·∂† (str_iso_eq_comp.to_fun (strpair_id_to_iso.to_fun 
                            (std_str_eq_eta.to_fun (std_str_comp_eq.to_fun p))))) = idtoiso p :=                            
begin
  hinduction p, hinduction str‚ÇÅ with s Œ±,
  let str := std_structure.mk s Œ±,
  have p‚ÇÅ : std_str_comp_eq.to_fun (refl str) = refl str, from rfl,
  have p‚ÇÇ : std_str_eq_eta.to_fun (refl str) = ‚ü®refl s, idpo‚ü©, from rfl,
  have p‚ÇÉ : strpair_id_to_iso.to_fun ‚ü®refl s, idpo‚ü© = 
            ‚ü®Œª x, id_is_iso (s x), (std_str.id_H Œ±, std_str.id_H Œ±)‚ü©, from rfl,
  have p‚ÇÑ : str_iso_eq_comp.to_fun ‚ü®Œª x, id_is_iso (s x), (std_str.id_H Œ±, std_str.id_H Œ±)‚ü© = id_is_iso str,
    by apply hom_eq_to_iso_eq; refl,         
  rwr idtoiso_refl_eq, rwr p‚ÇÅ, rwr p‚ÇÇ, rwr p‚ÇÉ, rwr p‚ÇÑ
end     

/- Now we can prove the equivalence and thus the Structure Identity Principle. -/
@[hott]
def std_str_eq_eqv_iso {C : Type u} [category.{v} C] {std_str : std_structure_on C} :
  ‚àÄ x y : std_structure std_str, (x = y) ‚âÉ (x ‚âÖ y) :=
assume x y, std_str_comp_eq ‚¨ùe std_str_eq_eta ‚¨ùe strpair_id_to_iso ‚¨ùe 
            str_iso_eq_comp ‚¨ùe std_str_comp_iso‚Åª¬π·µâ 

@[hott, instance]
def structure_identity_principle {C : Type u} [category.{v} C] (std_str : std_structure_on C) :
  category (std_structure std_str) :=
have idtoiso_eq : ‚àÄ x y : std_structure std_str, (std_str_eq_eqv_iso x y).to_fun = @idtoiso _ _ x y, from
  begin 
    intros x y, apply eq_of_homotopy, 
    intro p, exact comp_eqv_idtoiso p 
  end,      
have idtoiso_eqv : ‚àÄ x y : std_structure std_str, is_equiv (@idtoiso _ _ x y), from 
  assume x y,
  have eqv : is_equiv (std_str_eq_eqv_iso x y).to_fun, from (std_str_eq_eqv_iso x y).to_is_equiv,
  by rwr idtoiso_eq x y at eqv; exact eqv, 
category.mk idtoiso_eqv 

/- The forgetful functor from a category of multi-sorted standard structures to the underlying 
   category (which has products). -/
@[hott]
def forget_str {C : Type u} [category.{v} C] [has_products C] (std_str : std_structure_on C) :
  (std_structure std_str) ‚•§ C :=
begin
  fapply functor.mk,  
  { intro str, exact @pi_obj _ _ _ str.carrier (has_product_of_has_products str.carrier) },  
                                                                          -- map of objects
  { intros str‚ÇÅ str‚ÇÇ f, exact pi.lift (Œª x, (pi.œÄ str‚ÇÅ.carrier x) ‚â´ f.1 x) },  
                                                                         -- map of morphisms
  { intro str, change pi.lift (Œª (x : ‚Ü•(std_str.S)), pi.œÄ str.carrier x ‚â´ ùüô (str.carrier x)) = _, 
    have p : (Œª x, pi.œÄ str.carrier x ‚â´ ùüô (str.carrier x)) = 
              Œª x, ùüô (‚àè str.carrier) ‚â´ pi.œÄ str.carrier x, from
      begin apply eq_of_homotopy, intro x, hsimp end, 
    rwr p, apply eq.inverse, apply pi.hom_is_lift },  -- preserves identity morphisms
  { intros str‚ÇÅ str‚ÇÇ str‚ÇÉ f g, 
    change pi.lift (Œª x, pi.œÄ str‚ÇÅ.carrier x ‚â´ (f ‚â´ g).fst x) = 
           pi.lift (Œª x, pi.œÄ str‚ÇÅ.carrier x ‚â´ f.fst x) ‚â´ 
                                                  pi.lift (Œª x, pi.œÄ str‚ÇÇ.carrier x ‚â´ g.fst x),
    have p : (Œª x, pi.œÄ str‚ÇÅ.carrier x ‚â´ (f ‚â´ g).fst x) = 
             (Œª x, pi.lift (Œª x, pi.œÄ str‚ÇÅ.carrier x ‚â´ f.1 x) ‚â´ pi.œÄ str‚ÇÇ.carrier x ‚â´ (g.1 x)), from 
    begin 
      apply eq_of_homotopy, intro x, change pi.œÄ str‚ÇÅ.carrier x ‚â´ (f.1 x) ‚â´ (g.1 x) = _,
      rwr <- precategory.assoc, 
      change _ = pi.lift (Œª x, pi.œÄ str‚ÇÅ.carrier x ‚â´ f.fst x) ‚â´ pi.œÄ str‚ÇÇ.carrier x ‚â´ g.fst x, 
      rwr <- precategory.assoc, rwr pi.lift_œÄ_eq
    end,                       
    rwr p, rwr pi.lift_fac (pi.lift (Œª x, pi.œÄ str‚ÇÅ.carrier x ‚â´ f.1 x)) 
                           (Œª x, pi.œÄ str‚ÇÇ.carrier x ‚â´ g.1 x) }  
                           -- preserves compositions of morphisms 
end 

/- The forgetful functor is faithful. -/
@[hott]
def forget_is_faithful {C : Type u} [category.{v} C] [has_products C] 
  (std_str : std_structure_on C) : is_faithful_functor _ _ (forget_str std_str) :=
begin 
  intros str‚ÇÅ str‚ÇÇ f‚ÇÅ f‚ÇÇ p, fapply sigma.sigma_eq, 
  { apply eq_of_homotopy, intro x, sorry },
  { apply pathover_of_tr_eq, exact is_prop.elim _ _ } 
end  

/- The forgetful functor composed with a functor to a category of standard structures -/
@[hott]
def forget {J : Type.{u'}} [precategory.{v'} J] {C : Type u} [category.{v} C] [has_products C]
  {std_str : std_structure_on C} (F : J ‚•§ std_structure std_str) : J ‚•§ C :=
F ‚ãô (forget_str std_str)


/- A criterion for a category of standard structures over a category with limits to have limits:
   - The limit cone of the underlying functor of a shape carries a structure.
   - The leg morphisms of this limit cone respect the structures.
   - The lift morphisms to this limit cone respect the structures. 
   
   We first need to construct the underlying cone of a cone in the category of structures. -/
@[hott, reducible]
def str_cone_to_cone {J : Set.{u'}} [precategory.{v'} J] {C : Type u} [category.{v} C] 
  [has_products C] {std_str : std_structure_on C} {F : J ‚•§ (std_structure std_str)} 
  (s : cone F) : cone (forget F) :=
begin 
  fapply cone.mk, 
  { exact s.X.1 },  -- vertex
  { fapply nat_trans.mk,
    { intro j, exact (s.œÄ.app j).1 },  --transformation of objects
    { intros j k f, hsimp, 
      change (s.œÄ.app k).1 = (s.œÄ.app j).1 ‚â´ (F.map f).1, rwr <- comp_hom_std_C _ _,
      rwr <- ap sigma.fst (s.œÄ.naturality f), hsimp } }  --naturality
end    

/- We define the structure data of a limit cone for all limit cones of the underlying
   category at once, because we can change then easily to the most fitting construction. -/
@[hott]
structure limit_cone_str_data {J : Set.{u'}} [precategory.{v'} J] {C : Type u} 
  [category.{v} C] [has_products C] {std_str : std_structure_on C} 
  {F : J ‚•§ (std_structure std_str)} (lc : limit_cone (forget F)) :=
(lc_str : std_str.P (lc.cone.X)) 
(lc_legs_H : Œ† (j : J), std_str.H lc_str ((F.obj j).str) (lc.cone.œÄ.app j))
(lift_H : Œ† (s : cone F), std_str.H s.X.str lc_str (lc.is_limit.lift (str_cone_to_cone s)))

@[hott]
def str_limit_cone {J : Set.{u'}} [precategory.{v'} J] {C : Type u} 
  [category.{v} C] [has_products C] {std_str : std_structure_on C} 
  {F : J ‚•§ (std_structure.{v u w} std_str)} (lc : limit_cone (forget F))
  (lcd : limit_cone_str_data lc) : limit_cone F :=
begin 
  fapply limit_cone.mk, 
  { fapply cone.mk, -- the limit cone 
    { exact std_structure.mk lc.cone.X lcd.lc_str },
    { fapply nat_trans.mk, 
      { intro j, 
        exact ‚ü®lc.cone.œÄ.app j, lcd.lc_legs_H j‚ü© },
      { intros j k f, apply hom_eq_C_std, rwr comp_hom_std_C,  
        exact lc.cone.œÄ.naturality f } } },
  { fapply is_limit.mk, -- the limit cone is a limit
    { intro s, 
      exact ‚ü®lc.is_limit.lift (str_cone_to_cone s), lcd.lift_H s‚ü© },
    { intros s j, apply hom_eq_C_std, rwr comp_hom_std_C, hsimp, 
      exact lc.is_limit.fac (str_cone_to_cone s) j },
    { intros s m fac_m, apply hom_eq_C_std, hsimp, 
      have fac_m1 : ‚àÄ j : J, m.1 ‚â´ (lc.cone.œÄ.app j) = 
                                                   (str_cone_to_cone s).œÄ.app j, from 
        assume j, 
        calc m.1 ‚â´ (lc.cone.œÄ.app j) = (s.œÄ.app j).1 : ap sigma.fst (fac_m j)
             ... = (str_cone_to_cone s).œÄ.app j : rfl,
      exact lc.is_limit.uniq (str_cone_to_cone s) m.1 fac_m1 } }
end                

@[hott]
def str_has_limit {J : Set.{u'}} [precategory.{v'} J] {C : Type u} 
  [category.{v} C] [has_products C] [has_limits_of_shape J C] {std_str : std_structure_on C} 
  (F : J ‚•§ (std_structure std_str)) 
  (lcd : limit_cone_str_data (get_limit_cone (forget F))) : has_limit F :=
has_limit.mk (str_limit_cone (get_limit_cone (forget F)) lcd)                                           

@[hott, instance]
def std_structure_has_limits_of_shape {J : Set.{u'}} [precategory.{v'} J] {C : Type u} 
  [category.{v} C] [has_limits_of_shape J C] {std_str : std_structure_on C} 
  (lcd_F : Œ† F : J ‚•§ (std_structure std_str), limit_cone_str_data (get_limit_cone (forget F))) : 
  has_limits_of_shape J (std_structure std_str) :=
has_limits_of_shape.mk (Œª F, str_has_limit F (lcd_F F))


open signature

/- We define structures of a gven signature in a category `C` with products. -/
@[hott]  
structure Sig_structure_on (sign : fo_signature) {C : Type u} [category.{v} C] :=
  ( car : sign.sorts -> C )
  
  ( ops : ‚àÄ o : sign.ops, ((sign.ops_arity o) -> carrier) -> carrier )
  ( rels : ‚àÄ r : sign.rels, ((sign.rels_arity r) -> carrier) -> trunctype.{0} -1 )

/- The following three lemmas should be produced automatically. -/
@[hott]
def Œ©_str_eq {sign : fo_signature} {carrier : Set} 
  {Œ©_str‚ÇÅ Œ©_str‚ÇÇ : Œ©_structure_on sign carrier} : 
  (Œ©_str‚ÇÅ.ops = Œ©_str‚ÇÇ.ops) -> (Œ©_str‚ÇÅ.rels = Œ©_str‚ÇÇ.rels) -> (Œ©_str‚ÇÅ = Œ©_str‚ÇÇ) :=
begin
  intros p_ops p_rels, 
  hinduction Œ©_str‚ÇÅ with ops‚ÇÅ rels‚ÇÅ, hinduction Œ©_str‚ÇÇ with ops‚ÇÇ rels‚ÇÇ,
  exact ap011 Œ©_structure_on.mk p_ops p_rels
end    

@[hott]
def Œ©_str_eq_eta {sign : fo_signature} {carrier : Set} 
  {Œ©_str‚ÇÅ Œ©_str‚ÇÇ : Œ©_structure_on sign carrier} (p : Œ©_str‚ÇÅ = Œ©_str‚ÇÇ) :
  Œ©_str_eq (ap Œ©_structure_on.ops p) (ap Œ©_structure_on.rels p) = p := 
begin
  hinduction p, hinduction Œ©_str‚ÇÅ, reflexivity
end    

@[hott, instance]
def is_set_Œ©_structure_on (sign : fo_signature) (carrier : Set) : 
  is_set (Œ©_structure_on sign carrier) :=
begin
  fapply is_set.mk, intros Œ©_str‚ÇÅ Œ©_str‚ÇÇ p q, 
  rwr <- Œ©_str_eq_eta p, rwr <- Œ©_str_eq_eta q,
  apply ap011 Œ©_str_eq,
  apply is_set.elim, apply is_set.elim
end    

@[hott]
structure is_Œ©_structure_hom {sign : fo_signature} {A B : Set.{u}} 
  (Œ©_A : Œ©_structure_on sign A) (Œ©_B : Œ©_structure_on sign B) (h : A -> B) :=
( ops_pres : ‚àÄ (o : sign.ops) (x : (sign.ops_arity o) -> A), 
                                                     h (Œ©_A.ops o x) = Œ©_B.ops o (h ‚àò x) ) 
( rels_pres : ‚àÄ (r : sign.rels) (x : (sign.rels_arity r) -> A), 
                                                     Œ©_A.rels r x -> Œ©_B.rels r (h ‚àò x) )                                                       

@[hott, instance]
def is_prop_is_Œ©_Structure_hom {sign : fo_signature} {A B : Set.{u}} 
  (Œ©_A : Œ©_structure_on sign A) (Œ©_B : Œ©_structure_on sign B) (h : A -> B) : 
  is_prop (is_Œ©_structure_hom Œ©_A Œ©_B h) :=
begin
  apply is_prop.mk, intros strh‚ÇÅ strh‚ÇÇ, 
  hinduction strh‚ÇÅ with ops_pres‚ÇÅ rels_pres‚ÇÅ, hinduction strh‚ÇÇ with ops_pres‚ÇÇ rels_pres‚ÇÇ,
  fapply ap011 is_Œ©_structure_hom.mk,
  { exact is_prop.elim _ _ },
  { exact is_prop.elim _ _ }
end    

@[hott]
def std_str_of_Œ©_str (sign : fo_signature) : std_structure_on Set :=
begin
  fapply std_structure_on.mk,
  { exact Œª S : Set, Œ©_structure_on sign S },
  { intros S T Œ©_Str_S Œ©_Str_T h, 
    exact prop_resize (to_Prop (@is_Œ©_structure_hom sign _ _ Œ©_Str_S Œ©_Str_T h)) },
  { intros A Œ©_str_A, apply prop_to_prop_resize, fapply is_Œ©_structure_hom.mk, 
    { intros o x, refl },
    { intros r x a, exact a } },
  { intros A B C Œ©_str_A Œ©_str_B Œ©_str_C f g p_Œ©_hom_f p_Œ©_hom_g, 
    apply prop_to_prop_resize, fapply is_Œ©_structure_hom.mk, 
    { intros o x, change g (f (Œ©_str_A.ops o x)) = Œ©_str_C.ops o ((f ‚â´ g) ‚àò x), 
      rwr (prop_resize_to_prop p_Œ©_hom_f).ops_pres o x,
      rwr (prop_resize_to_prop p_Œ©_hom_g).ops_pres o (f ‚àò x) },
    { intros r x a, change ‚Ü•(Œ©_str_C.rels r (g ‚àò (f ‚àò x))), 
      apply (prop_resize_to_prop p_Œ©_hom_g).rels_pres r (f ‚àò x), 
      apply (prop_resize_to_prop p_Œ©_hom_f).rels_pres r x, exact a } },
  { intros A Œ©_str_A‚ÇÅ Œ©_str_A‚ÇÇ, fapply equiv.mk, 
    { intro Œ©_str_homs, 
      hinduction Œ©_str_A‚ÇÅ with ops‚ÇÅ rels‚ÇÅ, hinduction Œ©_str_A‚ÇÇ with ops‚ÇÇ rels‚ÇÇ, 
      fapply ap011 Œ©_structure_on.mk, 
      { apply eq_of_homotopy, intro o, apply eq_of_homotopy, intro x, 
        exact (prop_resize_to_prop Œ©_str_homs.1).ops_pres o x },
      { apply eq_of_homotopy, intro r, apply eq_of_homotopy, intro x, 
        apply prop_iff_eq, 
        { intro rx‚ÇÅ, apply (prop_resize_to_prop Œ©_str_homs.1).rels_pres r x, exact rx‚ÇÅ },
        { intro rx‚ÇÇ, apply (prop_resize_to_prop Œ©_str_homs.2).rels_pres r x, exact rx‚ÇÇ } } },
    { fapply adjointify, 
      { intro Œ©_str_eq, rwr Œ©_str_eq, 
        have Œ©_str_id : is_Œ©_structure_hom Œ©_str_A‚ÇÇ Œ©_str_A‚ÇÇ (ùüô A), from 
        begin 
          apply is_Œ©_structure_hom.mk, 
          { intros o x, refl },
          { intros r x rx, exact rx }
        end,
        exact ‚ü®prop_to_prop_resize Œ©_str_id, prop_to_prop_resize Œ©_str_id‚ü© },
      { intro b, exact @is_set.elim _ _ Œ©_str_A‚ÇÅ Œ©_str_A‚ÇÇ _ b },
      { intro a, exact is_prop.elim _ _ } } }
end  

@[hott]
def Œ©_structure (sign : fo_signature) :=
  std_structure (std_str_of_Œ©_str sign)

@[hott, instance]
def Œ©_sign_str_precategory (sign : fo_signature) : 
  precategory (Œ©_structure sign) := 
std_str_precategory (std_str_of_Œ©_str sign)

@[hott, instance]
def Œ©_str_precategory (sign : fo_signature) : 
  precategory (Œ©_structure sign) := 
std_str_precategory (std_str_of_Œ©_str sign)

@[hott, instance]
def Œ©_sign_str_category (sign : fo_signature) : 
  category (Œ©_structure sign) := 
structure_identity_principle (std_str_of_Œ©_str sign)

/- The category of Œ©-structures on sets having a given signature is usually too large to
   capture algebraic structures: These require that particular relations involving the
   operations are true for all possible arguments. 
   
   By prescribing logical equivalences of the signature relations to such relations and
   and requesting that they are always true we can define a predicate on the objects 
   of the Œ©-structure category that gives a full subcategory. -/
@[hott]
structure signature_laws (sign : fo_signature) :=
  (pred : Œ† (S : Œ©_structure sign) (r : sign.rels) 
            (args : (sign.rels_arity r) -> S.carrier), trunctype.{0} -1)
  (funct : Œ† {S T : Œ©_structure sign} (f : S ‚ü∂ T) (r : sign.rels) 
            (args : (sign.rels_arity r) -> S.carrier), 
            pred S r args -> pred T r (‚Üëf ‚àò args))  
  (ops_dep : Œ† {S T : Œ©_structure sign} (f : S ‚ü∂ T), 
               @is_set_bijective T.carrier S.carrier f -> 
               ‚àÄ (r : sign.rels) (args : (sign.rels_arity r) -> S.carrier), 
               pred S r args <-> pred T r (‚Üëf ‚àò args))                  

@[hott]
def Œ©_structure_laws_pred {sign : fo_signature} (P : signature_laws sign) : 
  Œ©_structure sign -> trunctype.{0} -1 :=
begin  
intro S, 
exact prop_resize 
      (to_Prop (‚àÄ r args, (S.str.rels r args).carrier <-> (P.pred S r args)) and
       to_Prop (‚àÄ r args, is_true (P.pred S r args)))
end                        

@[hott]
def Œ©_str_subtype {sign : fo_signature} (P : signature_laws sign) := 
  sigma.subtype (Œª S : Œ©_structure sign, Œ©_structure_laws_pred P S)

@[hott, instance]
def Œ©_str_subtype_category {sign : fo_signature} (P : signature_laws sign) : 
  category (Œ©_str_subtype P) :=
full_subcat_on_subtype (Œ©_structure_laws_pred P)  

/- A Subset of the underlying set of an Œ©-structure inherit the structure of the 
   Œ©-structure if the operations are closed on the subset. -/
@[hott]
def ops_closed {sign : fo_signature} {S : Œ©_structure sign} (R : Subset S.carrier) :=
  ‚àÄ (o : sign.ops) (args : (sign.ops_arity o) -> S.carrier), 
    (‚àÄ i : sign.ops_arity o, args i ‚àà R) -> S.str.ops o args ‚àà R 

@[hott]
def str_subobject {sign : fo_signature} {S : Œ©_structure sign} {R : Subset S.carrier}
  (oc : ops_closed R) : Œ©_structure sign :=
begin
  fapply std_structure.mk,
  { exact pred_Set R },
  { fapply Œ©_structure_on.mk, 
    { intros o x, exact ‚ü®S.str.ops o (sigma.fst ‚àò x), oc o (sigma.fst ‚àò x) (Œª i, (x i).2)‚ü© },
    { intros r x, exact S.str.rels r (sigma.fst ‚àò x) } }
end    

/- `str_subobject` is not the only structure on a subset `R` that is closed under the 
   Œ©-operations on a set `S` and is compatible with the subset embedding: There may be 
   relations on elements in `R` in the Œ©-structure on `S` that do not hold in the 
   Œ©-structure on `R`. But `str_subobject` is terminal among all those structures. -/
@[hott]
def str_subobject_comp {sign : fo_signature} {S : Œ©_structure sign} 
  {R : Subset S.carrier} (oc : ops_closed R) : 
  (std_str_of_Œ©_str sign).H (str_subobject oc).str S.str (pred_Set_map R) :=
begin
  apply prop_to_prop_resize, apply is_Œ©_structure_hom.mk,
  { intros o x, refl },
  { intros r x rx, exact rx }
end    

@[hott]
def terminal_str_on_subobj {sign : fo_signature} {S : Œ©_structure sign} 
  {R : Subset S.carrier} (oc : ops_closed R) : 
  ‚àÄ R_str : Œ©_structure_on sign (pred_Set R), 
    (std_str_of_Œ©_str sign).H R_str S.str (pred_Set_map R) ->
    (std_str_of_Œ©_str sign).H R_str (str_subobject oc).str (ùüô (pred_Set R)) :=
begin
 let substr := (str_subobject oc).str, 
 intros R_str R_str_comp, apply prop_to_prop_resize, apply is_Œ©_structure_hom.mk, 
 { intros o x, change R_str.ops o x = substr.ops o x, apply pred_Set_map_is_inj, 
   rwr (prop_resize_to_prop R_str_comp).ops_pres o x },
 { intros r x rx, change ‚Ü•(substr.rels r x), 
   exact (prop_resize_to_prop R_str_comp).rels_pres r x rx }
end                              

/- The induced structure on a subset of an Œ©-structured set closed under the 
   structure operations does not necessarily satisfy the laws of a predicate if the 
   laws are satisfied by the structured set.
   
   But this is the case if the laws are left-exact. -/
@[hott]
def left_exact_sign_laws {sign : fo_signature} (P : signature_laws sign)
  {S : Œ©_structure sign} (R : Subset S.1) (oc_R : ops_closed R) := Œ† (r : sign.rels) 
    (args : (sign.rels_arity r) -> (pred_Set R).carrier), 
    (P.pred S r ((pred_Set_map R) ‚àò args) -> P.pred (str_subobject oc_R) r args)  

@[hott]
def law_str_subset {sign : fo_signature} {P : signature_laws sign} {S : Œ©_str_subtype P}
  (R : Subset S.1.1) (oc_R : ops_closed R) 
  (le_laws : @left_exact_sign_laws sign P S.1 R oc_R) : 
  Œ©_str_subtype P :=
begin
  fapply sigma.mk,
  { exact str_subobject oc_R },
  { change ‚Ü•(Œ©_structure_laws_pred P (str_subobject oc_R)),
    apply prop_to_prop_resize, apply prod.mk, 
    { intros r args, apply prod.mk, 
      { intro so_rel, apply le_laws r args,
        apply ((prop_resize_to_prop S.2).1 r (((pred_Set_map R)) ‚àò args)).1, 
        assumption },
      { intro so_P, apply ((prop_resize_to_prop S.2).1 r (((pred_Set_map R)) ‚àò args)).2, 
        apply ((prop_resize_to_prop S.2).2 r (((pred_Set_map R)) ‚àò args)).2, 
        exact true.intro } },
    { intros r args, apply prod.mk, 
      { intro so_P, exact true.intro },
      { intro t, apply le_laws r args,
        apply ((prop_resize_to_prop S.2).2 r (((pred_Set_map R)) ‚àò args)).2,
        assumption } } }
end

/- Œ©-structured sets have all limits because the Œ©-structure on sections is induced by 
   the Œ©-structure on the sets in the diagram. -/
@[hott]
def Œ©_str_on_limit_cone {J : Set.{u'}} [precategory.{v'} J] {sign : fo_signature} 
  (F : J ‚•§ (Œ©_structure sign)) : limit_cone_str_data (set_limit_cone (forget F)) :=
begin 
  fapply limit_cone_str_data.mk,
  { fapply Œ©_structure_on.mk, 
    { intros o x, fapply dpair, 
      { intro j, 
        exact (F.obj j).str.ops o (((set_limit_cone (forget F)).cone.œÄ.app j) ‚àò x) },
      { apply prop_to_prop_resize, intros j k f, 
        change _ = (F.obj k).str.ops o ((set_limit_cone (forget F)).cone.œÄ.app k ‚àò x), 
        rwr <- cone.fac (set_limit_cone (forget F)).cone f, 
        exact (prop_resize_to_prop (hom_H (F.map f))).ops_pres o _ } },
    { intros r x, exact prop_resize (to_Prop (Œ† j : J, 
           (F.obj j).str.rels r (((set_limit_cone (forget F)).cone.œÄ.app j) ‚àò x))) } },
  { intro j, apply prop_to_prop_resize, apply is_Œ©_structure_hom.mk, 
    { intros o x, refl },
    { intros r x limit_rel, exact prop_resize_to_prop limit_rel j } },
  { intro s, apply prop_to_prop_resize, apply is_Œ©_structure_hom.mk, 
    { intros o x, fapply sigma.sigma_eq, 
      { apply eq_of_homotopy, intro j,
        change (s.œÄ.app j).1 (s.X.str.ops o x) = (F.obj j).str.ops o ((s.œÄ.app j).1 ‚àò x),
        rwr (prop_resize_to_prop (s.œÄ.app j).2).ops_pres },
      { apply pathover_of_tr_eq, exact is_prop.elim _ _ } },
    { intros r x s_rel, exact prop_to_prop_resize 
                (Œª j : J, (prop_resize_to_prop (s.œÄ.app j).2).rels_pres r x s_rel) } }
end

@[hott]
def Œ©_str_limit_cone {J : Set.{u'}} [precategory.{v'} J] {sign : fo_signature} 
  (F : J ‚•§ (Œ©_structure sign)) : limit_cone F :=
str_limit_cone (set_limit_cone (forget F)) (Œ©_str_on_limit_cone F)  

@[hott, instance]
def Œ©_str_has_limit {J : Set} [precategory J] {sign : fo_signature} 
  (F : J ‚•§ (Œ©_structure sign)) : has_limit F :=
has_limit.mk (Œ©_str_limit_cone F)

@[hott, instance]
def Œ©_str_has_limits_of_shape (J : Set) [precategory J] (sign : fo_signature) : 
  has_limits_of_shape J (Œ©_structure sign) :=
  has_limits_of_shape.mk (Œª F, Œ©_str_has_limit F)     

@[hott, instance]
def Œ©_str_has_products (sign : fo_signature) : has_products (Œ©_structure sign) :=
  ‚ü®Œª J : Set, Œ©_str_has_limits_of_shape (discrete J) sign‚ü©

@[hott, instance]
def Œ©_str_has_product {J : Set} {sign : fo_signature} (f : J -> (Œ©_structure sign)) : 
  has_product f :=
Œ©_str_has_limit (discrete.functor f)


@[hott, instance]
def subcat_has_product {J : Set} {sign : fo_signature} (f : J -> (Œ©_structure sign)) : 
  has_product f :=
Œ©_str_has_limit (discrete.functor f)

/- A subtype of Œ©-structures is closed under taking limits. -/
@[hott]
def Œ©_str_subtype_is_limit_closed {J : Set} [precategory J] {sign : fo_signature} 
  (P : signature_laws sign) (F : J ‚•§ Œ©_str_subtype P) : 
  limit_closed_subtype (Œ©_structure_laws_pred P) F :=
begin
  intro lc, apply prop_to_prop_resize, apply prod.mk,
  { intros r x, apply prod.mk, 
    { intro lc_rel_r_x, sorry },
    { sorry } },
  { sorry }
end  

end categories

end hott