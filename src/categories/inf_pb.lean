import categories.limits categories.adjoints

universes v v' u u' w
hott_theory

namespace hott
open hott.precategories hott.categories hott.categories.limits hott.is_trunc 
     categories.adjoints hott.set hott.subset hott.trunc 

namespace categories.inf_pullbacks

/- We need a pullback constructions for diagrams in `C` consisting of the arbitrary many 
   morphisms with common codomain, that is, diagrams over `inf_wedge`. -/
@[hott, hsimp]
def orthogonal_tuple_obj {C : Type _} [is_cat C] {J : Set} 
  {f : J -> C} {c : C} (leg : Œ† j : J, f j ‚ü∂ c) : inf_wedge J -> C :=
Œª s, match s with
     | inf_w_node.tip j := f j
     | inf_w_node.base C := c
     end    

@[hott, hsimp]
def orthogonal_tuple_map {C : Type _} [is_cat C] {J : Set} 
  {f : J -> C} {c : C} (leg : Œ† j : J, f j ‚ü∂ c) : Œ† {s t : inf_wedge J}, 
  (s ‚ü∂ t) -> (orthogonal_tuple_obj leg s ‚ü∂ orthogonal_tuple_obj leg t) :=
begin 
  intros s t, hinduction s with j, all_goals { hinduction t with k }, 
  { intro ar, hinduction ar, exact ùüô _ }, 
  { intro ar, exact leg j }, 
  { intro ar, hinduction ar }, 
  { intro ar, exact ùüô _ } 
end

@[hott, hsimp]
def orthogonal_tuple_map_id {C : Type _} [is_cat C] {J : Set} 
  {f : J -> C} {c : C} (leg : Œ† j : J, f j ‚ü∂ c) : 
  Œ† s : inf_wedge J, orthogonal_tuple_map leg (ùüô s) = ùüô (orthogonal_tuple_obj leg s) :=
begin intro s, hinduction s with j, refl, refl end

@[hott, hsimp]
def orthogonal_tuple_map_comp {C : Type _} [is_cat C] {J : Set} 
  {f : J -> C} {c : C} (leg : Œ† j : J, f j ‚ü∂ c) : Œ† {s t u : inf_wedge J}
  (g : s ‚ü∂ t) (h : t ‚ü∂ u), orthogonal_tuple_map leg (g ‚â´ h) = 
                       orthogonal_tuple_map leg g ‚â´ orthogonal_tuple_map leg h :=
begin
  intros s t u g h, hinduction s with j, all_goals { hinduction t with k }, 
  all_goals { try { hinduction g, change orthogonal_tuple_map leg (ùüô _ ‚â´ h) = _, 
    rwr is_precat.id_comp, change _ = orthogonal_tuple_map leg (ùüô _) ‚â´ _, 
    rwr orthogonal_tuple_map_id, rwr is_precat.id_comp } }, 
  { hinduction u with l, all_goals { induction h }, 
    change orthogonal_tuple_map leg (_ ‚â´ ùüô _) = _, rwr is_precat.comp_id, 
    change _ = orthogonal_tuple_map leg _ ‚â´ ùüô _, rwr is_precat.comp_id }, 
  hinduction g
end 

@[hott]
def orthogonal_tuple {C : Type _} [is_cat C] {J : Set} 
  {f : J -> C} {c : C} (leg : Œ† j : J, f j ‚ü∂ c) : inf_wedge J ‚•§ C :=
precategories.functor.mk (orthogonal_tuple_obj leg) 
                           (@orthogonal_tuple_map _ _ _ _ _ leg) 
                           (orthogonal_tuple_map_id leg) 
                           (@orthogonal_tuple_map_comp _ _ _ _ _ leg)  

/- Classes and instances for pullbacks along arbitrary many homomorphisms. -/
@[hott]
class has_inf_pullback {C : Type _} [is_cat C] {J : Set} {f : J -> C} {c : C} 
  (leg : Œ† j : J, f j ‚ü∂ c) := (has_limit : has_limit (orthogonal_tuple leg))

@[hott, instance]
def has_limit_of_has_inf_pb {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} {c : C} 
  (leg : Œ† j : J, f j ‚ü∂ c) [H : has_inf_pullback leg] : 
  has_limit (orthogonal_tuple leg) := H.has_limit

@[hott]
def inf_pullback {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} {c : C} 
  (leg : Œ† j : J, f j ‚ü∂ c) [H : has_inf_pullback leg] := limit (orthogonal_tuple leg) 

@[hott]
def inf_pullback_homo {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} {c : C} 
  (leg : Œ† j : J, f j ‚ü∂ c) [has_inf_pullback leg] : Œ† j : J, inf_pullback leg ‚ü∂ f j :=
assume j, limit_leg (orthogonal_tuple leg) (inf_w_node.tip j)  

@[hott]
def inf_pullback_diag {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} {c : C} 
  (leg : Œ† j : J, f j ‚ü∂ c) [has_inf_pullback leg] : inf_pullback leg ‚ü∂ c :=
limit_leg (orthogonal_tuple leg) inf_w_base

@[hott]
class has_inf_pullbacks (C : Category.{u v}) := 
  (has_limit_of_shape : Œ† (A : Set), has_limits_of_shape (inf_wedge A) C)

@[hott, instance]
def has_inf_pb_of_has_inf_pullbacks {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} (leg : Œ† j : J, f j ‚ü∂ c) [has_inf_pullbacks C] : has_inf_pullback leg := 
‚ü®@has_limits_of_shape.has_limit _ _ _ _ 
       (has_inf_pullbacks.has_limit_of_shape C J) (orthogonal_tuple leg)‚ü©

@[hott, instance]
def has_inf_pb_of_has_limits_of_shape {C : Category} {J : Set} {f : J -> C} 
  {c : C} (leg : Œ† j : J, f j ‚ü∂ c) [H : has_limits_of_shape (inf_wedge J) C] : 
  has_inf_pullback leg :=
‚ü®@has_limits_of_shape.has_limit _ _ _ _ H (orthogonal_tuple leg)‚ü© 

@[hott, instance]
def has_inf_pullbacks_of_has_limits (C : Category) [H : has_limits C] : 
  has_inf_pullbacks C :=
has_inf_pullbacks.mk (Œª J, @has_limits.has_limit_of_shape C _ H (inf_wedge J) _) 

/- The cone over an `orthogonal_tuple` is a `hsquare` (for hypersquare). -/
@[hott]
abbreviation hsquare {C : Type _} [is_cat C] {J : Set} {f : J -> C} 
  {c : C} (leg : Œ† j : J, f j ‚ü∂ c) := cone (orthogonal_tuple leg) 

@[hott]
def hsquare.of_legs {C : Type _} [is_cat C] {J : Set} {f : J -> C} 
  {c d : C} (leg : Œ† j : J, f j ‚ü∂ c) {j_leg : Œ† j : J, d ‚ü∂ f j} {c_leg : d ‚ü∂ c}
  (w : Œ† j : J, j_leg j ‚â´ leg j = c_leg) : hsquare leg :=
begin
  fapply cone.mk d, fapply nat_trans.mk,
  { intro s, hinduction s with j, exact j_leg j, exact c_leg },
  { intros s‚ÇÅ s‚ÇÇ h, hinduction s‚ÇÅ with j‚ÇÅ, all_goals { hinduction s‚ÇÇ with j‚ÇÇ },
    all_goals { hinduction h },
    { change (constant_functor d).map (ùüô _) ‚â´ _ = _, rwr is_precat.id_comp, 
      change _ = _ ‚â´ (orthogonal_tuple leg).map (ùüô _), 
      rwr precategories.functor.map_id, rwr is_precat.comp_id },
    { rwr is_precat.id_comp, change _ = _ ‚â´ leg j‚ÇÅ, rwr w j‚ÇÅ },
    { rwr is_precat.id_comp, change _ = _ ‚â´ (ùüô _), rwr is_precat.comp_id } }  
end

@[hott]
def hsquare_edge {C : Type _} [is_cat C] {J : Set} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) : Œ† j : J, S.X ‚ü∂ f j := 
assume j, S.œÄ.app (inf_w_node.tip j)

@[hott]
def hsquare_diag {C : Type _} [is_cat C] {J : Set} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) : S.X ‚ü∂ c :=
S.œÄ.app inf_w_base 

@[hott]
def hsquare_eq {C : Type _} [is_cat C] {J : Set} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) : 
  Œ† (j : J), (hsquare_edge S j) ‚â´ leg j = hsquare_diag S :=
assume j,
calc (hsquare_edge S j) ‚â´ leg j = (S.œÄ.app (inf_w_node.tip j)) ‚â´ 
                                     (orthogonal_tuple leg).map (inf_w_leg j) : rfl 
     ... = S.œÄ.app (inf_w_node.base J) : by rwr cone.fac S (inf_w_leg j) 

@[hott] 
def inf_pullback_eq {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} [has_inf_pullback leg] : 
  Œ† j : J, inf_pullback_homo leg j ‚â´ leg j = inf_pullback_diag leg :=
assume j, hsquare_eq (limit.cone (orthogonal_tuple leg)) j 

@[hott]
def inf_pullback_lift {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) [has_inf_pullback leg] : 
  S.X ‚ü∂ inf_pullback leg :=
((get_limit_cone (orthogonal_tuple leg)).is_limit.lift S).v_lift 

@[hott]
def inf_pb_lift_eq {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) [has_inf_pullback leg] : 
  Œ† j : J, inf_pullback_lift S ‚â´ inf_pullback_homo leg j = hsquare_edge S j :=
Œª j,  ((get_limit_cone (orthogonal_tuple leg)).is_limit.lift S).fac (inf_w_node.tip j)  


@[hott]
def inf_pb_lift_diag_eq {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) [has_inf_pullback leg] : 
  inf_pullback_lift S ‚â´ inf_pullback_diag leg = hsquare_diag S :=
((get_limit_cone (orthogonal_tuple leg)).is_limit.lift S).fac inf_w_base

@[hott]
def inf_pullback_uniq {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (S : hsquare leg) [has_inf_pullback leg] : 
  Œ† (h : S.X ‚ü∂ inf_pullback leg), (Œ† (j : J), h ‚â´ inf_pullback_homo leg j = 
                   hsquare_edge S j) -> h ‚â´ (inf_pullback_diag leg) = hsquare_diag S -> 
    h = inf_pullback_lift S :=
assume h p q,
have w : Œ† (iw : inf_wedge J), h ‚â´ (limit.cone (orthogonal_tuple leg)).œÄ.app iw =
                                    S.œÄ.app iw, from  
  begin intro iw, hinduction iw with j, exact p j, exact q end,
(get_limit_cone (orthogonal_tuple leg)).is_limit.uniq S (cone_map.mk h w) 


/- Monomorphisms are stable under `inf_pullback`. -/
@[hott]
def mono_is_inf_stable {C : Category.{u v}} {J : Set.{u'}} {f : J -> C} 
  {c : C} {leg : Œ† j : J, f j ‚ü∂ c} (H : Œ† j : J, is_mono (leg j)) 
  [has_inf_pullback leg] : is_mono (inf_pullback_diag leg) :=
begin
  intros d g‚ÇÅ g‚ÇÇ pg,
  have w‚ÇÅ : Œ† (j : J), (g‚ÇÅ ‚â´ inf_pullback_homo leg j) ‚â´ leg j = 
                                                 g‚ÇÅ ‚â´ (inf_pullback_diag leg), from
    begin intro j, rwr is_precat.assoc, rwr inf_pullback_eq end,
  have w‚ÇÇ : Œ† (j : J), (g‚ÇÇ ‚â´ inf_pullback_homo leg j) ‚â´ leg j = 
                                                 g‚ÇÇ ‚â´ (inf_pullback_diag leg), from
    begin intro j, rwr is_precat.assoc, rwr inf_pullback_eq end,
  have w : Œ† (j : J), (g‚ÇÅ ‚â´ inf_pullback_homo leg j) = (g‚ÇÇ ‚â´ inf_pullback_homo leg j), from
    Œª j, H j d _ _ (w‚ÇÅ j ‚¨ù pg ‚¨ù (w‚ÇÇ j)‚Åª¬π), 
  let S‚ÇÅ := hsquare.of_legs leg w‚ÇÅ, let S‚ÇÇ := hsquare.of_legs leg w‚ÇÇ,
  have p‚ÇÅ : g‚ÇÅ = inf_pullback_lift S‚ÇÅ, from inf_pullback_uniq S‚ÇÅ g‚ÇÅ (Œª j, idp) idp,
  have p‚ÇÇ : g‚ÇÇ = inf_pullback_lift S‚ÇÅ, from 
    begin fapply inf_pullback_uniq S‚ÇÅ g‚ÇÇ, { intro j, rwr <- w }, { rwr <- pg } end,
  exact p‚ÇÅ ‚¨ù p‚ÇÇ‚Åª¬π
end

/- The intersection of arbitrary many subobjects. -/
@[hott]
class has_subobj_iInter {C : Category.{u v}} {c : C} {J : Set.{u'}} (f : J -> subobject c) :=
  (exists_inter : @has_product _ subobject_is_cat _ f)

@[hott, instance]
def has_iInter_of_has_inf_pullbacks {C : Category.{u v}} 
  [has_inf_pullbacks.{v u u'} C] {c : C} {J : Set.{u'}} 
  (f : J -> subobject.{u v} c) : has_subobj_iInter f :=
begin 
  apply has_subobj_iInter.mk, apply has_product.mk, apply has_limit.mk,
  fapply limit_cone.mk, 
  { fapply fan.mk, 
    { fapply subobject.mk, exact inf_pullback (Œª j : J, (f j).hom), 
      exact limit_leg (orthogonal_tuple (Œª j : J, (f j).hom)) (inf_w_base), 
      exact mono_is_inf_stable (Œª j, (f j).is_mono) }, 
    { intro j, fapply hom_of_monos.mk,
      { exact inf_pullback_homo _ j },
      { exact inf_pullback_eq j } } },
  { fapply is_limit.mk, 
    { intro cone_f, 
      let leg := Œª j : J, (f j).hom,
      have w : Œ† j : J, ((cone_f.œÄ.app j).hom_obj ‚â´ leg j) = cone_f.X.hom, from 
        Œª j, (cone_f.œÄ.app j).fac, 
      let S : hsquare leg := @hsquare.of_legs _ _ _ _ _ cone_f.X.obj leg 
                                        (Œª j, (cone_f.œÄ.app j).hom_obj) cone_f.X.hom w,
      fapply cone_map.mk,
      { fapply hom_of_monos.mk, exact inf_pullback_lift S, exact inf_pb_lift_diag_eq S },
      { intro j, exact is_prop.elim _ _ } }, 
    { intros cf j, exact is_prop.elim _ _ } }
end  

@[hott, instance]
def has_iInter_to_has_product {C : Category} {c : C} {J : Set} 
  (f : J -> subobject c) [H : has_subobj_iInter f] : has_product f := H.exists_inter

@[hott]
def subobject.iInter {C : Category.{u v}} {c : C} {J : Set.{u'}} (f : J -> subobject c)
  [has_subobj_iInter f] : subobject c := ‚àè f


end categories.inf_pullbacks

end hott