import hott.algebra.ring sets.basic categories.examples categories.cat_limits init2 types2
       hott.types.prod hott.algebra.relation categories.cat_colimits

universes u u' v w
hott_theory

namespace hott
open hott.is_trunc hott.is_equiv hott.algebra hott.set subset categories hott.trunc
     hott.category_theory.limits hott.sigma hott.prod hott.relation 
     hott.category_theory.colimits hott.ulift

namespace algebra

/- We construct the category of rings as a first-order signature category of operations and 
   laws governing them. 
   
   We first need to define the first-order signature. -/
@[hott]
inductive ring_ops : Type 0 
| add : ring_ops
| zero : ring_ops 
| neg : ring_ops 
| mul : ring_ops 
| one : ring_ops

@[hott]
def ring_ops_is_set : is_set ring_ops := 
  have ring_ops_equiv : ring_ops ‚âÉ fin_Set 5, from 
  begin 
    fapply equiv.MK,
    { sorry },
    { sorry },
    { sorry },
    { sorry }
  end,
  is_trunc_equiv_closed_rev 0 ring_ops_equiv (fin_Set 5).struct 

@[hott]
def ring_ops_Set : Set.{0} := Set.mk ring_ops ring_ops_is_set

@[hott]
def ring_signature : fo_signature :=
  sorry   

/- `comm_ring R` is a standard structure on a set `R`:

   Homomorphisms are maps between sets with a `comm_ring` structure preserving addition and 
   multiplication; these laws are propositions, hence being a homomorphism is a proposition. 

   Since it is possible that the same set can be provided with different `comm_ring` structures,
   these cannot be instances. 
   
   Since the set structure underlying `comm_ring` is not bundled we need a variation of `comm_ring`. -/
@[hott]
def comm_ring_set (X : Set) := comm_ring X

@[hott]
instance {X : Set} : has_coe (comm_ring_set X) (comm_ring X) :=
  ‚ü®Œª Œ± : comm_ring_set X, Œ± ‚ü©

@[hott]
structure is_ring_hom {R S : Set.{u}} (Œ± : comm_ring R) (Œ≤ : comm_ring S) (f : R -> S) := 
  (map_one : f 1 = 1)
  (map_mul : ‚àÄ a b : R, f (a * b) = f a * f b)
  (map_zero : f 0 = 0)
  (map_add : ‚àÄ a b : R, f (a + b) = f a + f b)

@[hott]
def is_ring_hom_eta {R S : Set} {Œ± : comm_ring R} {Œ≤ : comm_ring S} {f : R -> S}
  (rh : is_ring_hom Œ± Œ≤ f) : 
  rh = is_ring_hom.mk rh.map_one rh.map_mul rh.map_zero rh.map_add :=
begin hinduction rh, refl end   

@[hott, instance]
def is_prop_is_ring_hom {R S : Set} (Œ± : comm_ring R) (Œ≤ : comm_ring S) (f : R ‚ü∂ S) :
  is_prop (is_ring_hom Œ± Œ≤ f) :=
have H_one : ‚àÄ p q : f 1 = 1, p = q, from assume p q, is_set.elim p q, 
have H_mul : ‚àÄ p q : ‚àÄ a b : R, f (a * b) = f a * f b, p = q, from 
  assume p q, is_prop.elim p q,
have H_zero : ‚àÄ p q : f 0 = 0, p = q, from assume p q, is_set.elim p q,
have H_add : ‚àÄ p q : ‚àÄ a b : R, f (a + b) = f a + f b, p = q, from 
  assume p q, is_prop.elim p q, 
have H : ‚àÄ rh‚ÇÅ rh‚ÇÇ : is_ring_hom Œ± Œ≤ f, rh‚ÇÅ = rh‚ÇÇ, from
  assume rh‚ÇÅ rh‚ÇÇ, 
  calc rh‚ÇÅ = is_ring_hom.mk rh‚ÇÅ.map_one rh‚ÇÅ.map_mul rh‚ÇÅ.map_zero rh‚ÇÅ.map_add : is_ring_hom_eta rh‚ÇÅ
       ... = is_ring_hom.mk rh‚ÇÇ.map_one rh‚ÇÇ.map_mul rh‚ÇÇ.map_zero rh‚ÇÇ.map_add : 
             ap_4 is_ring_hom.mk (H_one rh‚ÇÅ.map_one rh‚ÇÇ.map_one) (H_mul rh‚ÇÅ.map_mul rh‚ÇÇ.map_mul) 
                                 (H_zero rh‚ÇÅ.map_zero rh‚ÇÇ.map_zero) (H_add rh‚ÇÅ.map_add rh‚ÇÇ.map_add)
       ... = rh‚ÇÇ : (is_ring_hom_eta rh‚ÇÇ)‚Åª¬π,
is_prop.mk H 

@[hott]
def ring_hom_prop {R S : Set} (Œ± : comm_ring_set R) (Œ≤ : comm_ring_set S) (f : R ‚ü∂ S) : Prop :=
  trunctype.mk (is_ring_hom Œ± Œ≤ f) (is_prop_is_ring_hom Œ± Œ≤ f)

/- The identity map on a set is a ring homomorphism with respect to any ring structure. -/
@[hott]
def id_ring_hom {R : Set} (Œ± : comm_ring R) : ring_hom_prop Œ± Œ± (ùüô R) :=
  let id_R := id_map R in
  have one_R : id_R 1 = 1, by refl,
  have mul_R : ‚àÄ r s : R, id_R (r * s) = (id_R r) * (id_R s), 
    by intros r s; refl,
  have zero_R : id_R 0 = 0, by refl,
  have add_R : ‚àÄ r s : R, id_R (r + s) = (id_R r) + (id_R s), 
    by intros r s; refl,
  is_ring_hom.mk one_R mul_R zero_R add_R 

@[hott]
def id_ring_hom_set {R : Set} (Œ± : comm_ring_set R) : ring_hom_prop Œ± Œ± (ùüô R) := 
  id_ring_hom ‚ÜëŒ±   

/- The composition of two maps that are ring homomorphisms is a ring homomorphism. -/
def comp_ring_hom {R S T : Set} {Œ± : comm_ring R} {Œ≤ : comm_ring S} {Œ≥ : comm_ring T} {f : R ‚ü∂ S}
  {g : S ‚ü∂ T} (H‚ÇÅ : ring_hom_prop Œ± Œ≤ f) (H‚ÇÇ : ring_hom_prop Œ≤ Œ≥ g) : ring_hom_prop Œ± Œ≥ (f ‚â´ g) :=
let h := Œª r : R, g (f r) in   
have h_one : h 1 = 1, from
    calc h 1 = g (f 1) : rfl
         ... = g 1 : by rwr H‚ÇÅ.map_one
         ... = 1 : by rwr H‚ÇÇ.map_one,
  have h_mul : ‚àÄ r‚ÇÅ r‚ÇÇ : R, h (r‚ÇÅ * r‚ÇÇ) = h r‚ÇÅ * h r‚ÇÇ, from assume r‚ÇÅ r‚ÇÇ, 
    calc h (r‚ÇÅ * r‚ÇÇ) = g (f (r‚ÇÅ * r‚ÇÇ)) : rfl
         ... = g (f r‚ÇÅ * f r‚ÇÇ) : by rwr H‚ÇÅ.map_mul
         ... = g (f r‚ÇÅ) * g (f r‚ÇÇ) : by rwr H‚ÇÇ.map_mul
         ... = h r‚ÇÅ * h r‚ÇÇ : rfl,
  have h_zero : h 0 = 0, from 
    calc h 0 = g (f 0) : rfl
         ... = g 0 : by rwr H‚ÇÅ.map_zero
         ... = 0 : by rwr H‚ÇÇ.map_zero,
  have h_add : ‚àÄ r‚ÇÅ r‚ÇÇ : R, h (r‚ÇÅ + r‚ÇÇ) = h r‚ÇÅ + h r‚ÇÇ, from assume r‚ÇÅ r‚ÇÇ, 
    calc h (r‚ÇÅ + r‚ÇÇ) = g (f (r‚ÇÅ + r‚ÇÇ)) : rfl
         ... = g (f r‚ÇÅ + f r‚ÇÇ) : by rwr H‚ÇÅ.map_add
         ... = g (f r‚ÇÅ) + g (f r‚ÇÇ) : by rwr H‚ÇÇ.map_add
         ... = h r‚ÇÅ + h r‚ÇÇ : rfl,
is_ring_hom.mk h_one h_mul h_zero h_add 

@[hott]
def comp_ring_hom_set {R S T : Set} {Œ± : comm_ring_set R} {Œ≤ : comm_ring_set S} {Œ≥ : comm_ring T} {f : R ‚ü∂ S}
  {g : S ‚ü∂ T} (H‚ÇÅ : ring_hom_prop Œ± Œ≤ f) (H‚ÇÇ : ring_hom_prop Œ≤ Œ≥ g) : ring_hom_prop Œ± Œ≥ (f ‚â´ g) :=
@comp_ring_hom _ _ _ Œ± Œ≤ Œ≥ _ _ H‚ÇÅ H‚ÇÇ   

/- We now start the proof that `is_ring_hom` is a standard structure on sets. 

   We first refactor the definition of a `comm_ring` structure, to simplify proofs
   of equality, by splitting it up into two structures of operations and laws they
   need to satisfy. 
   
   I don't see how the instance mechanism can be used here to write `add` as `+`
   etc. The problem is that different additions will appear for the same set `X`;
   a symbol like `+‚Çê` would be better, but cannot be obtained from `has_add X`. -/
@[hott]
structure comm_ring_ops (X : Set) :=
  (add : X -> X -> X)
  (zero : X)
  (neg : X -> X)
  (mul : X -> X -> X)
  (one : X)

@[hott, hsimp, reducible]
def comm_ring_to_ops {X : Set} (Œ≥ : comm_ring X) : comm_ring_ops X :=
  comm_ring_ops.mk Œ≥.add Œ≥.zero Œ≥.neg Œ≥.mul Œ≥.one

@[hott]
structure comm_ring_laws {X : Set} (Œ± : comm_ring_ops X) :=
  (add_assoc : Œ† (a b c : X), Œ±.add (Œ±.add a b) c = Œ±.add a (Œ±.add b c)) 
  (zero_add : Œ† a : X, Œ±.add Œ±.zero a = a)
  (add_zero : Œ† a : X, Œ±.add a Œ±.zero = a)
  (neg_add : Œ† a : X, Œ±.add (Œ±.neg a) a = Œ±.zero)
  (add_comm : Œ† a b : X, Œ±.add a b = Œ±.add b a) 
  (mul_assoc : Œ† (a b c : X), Œ±.mul (Œ±.mul a b) c = Œ±.mul a (Œ±.mul b c)) 
  (one_mul : Œ† a : X, Œ±.mul Œ±.one a = a)
  (mul_one : Œ† a : X, Œ±.mul a Œ±.one = a)
  (mul_comm : Œ† a b : X, Œ±.mul a b = Œ±.mul b a)
  (right_distrib : Œ† a b c : X, Œ±.mul a (Œ±.add b c) = 
                                  Œ±.add (Œ±.mul a b) (Œ±.mul a c)) 
  (left_distrib : Œ† a b c : X, Œ±.mul (Œ±.add a b) c = 
                                  Œ±.add (Œ±.mul a c) (Œ±.mul b c))

@[hott, instance]
def prop_comm_ring_laws {X : Set.{u}} (Œ± : comm_ring_ops X) : 
  is_prop (comm_ring_laws Œ±) :=
have H : ‚àÄ Œ≤‚ÇÅ Œ≤‚ÇÇ : comm_ring_laws Œ±, Œ≤‚ÇÅ = Œ≤‚ÇÇ, from 
  begin 
    intros Œ≤‚ÇÅ Œ≤‚ÇÇ, hinduction Œ≤‚ÇÅ, hinduction Œ≤‚ÇÇ, 
    apply ap_11 (@comm_ring_laws.mk X Œ±); 
    { { apply eq_of_homotopy3, intros a b c, exact @is_set.elim X _ _ _ _ _ } <|> 
      { apply eq_of_homotopy2, intros a b, exact @is_set.elim X _ _ _ _ _ } <|>
      { apply eq_of_homotopy, intros a, exact @is_set.elim X _ _ _ _ _ } },  
  end, 
is_prop.mk H  

@[hott, hsimp]
def comm_ring_to_laws {X : Set} (Œ≥ : comm_ring X) : 
  comm_ring_laws (comm_ring_to_ops Œ≥) :=
let Œ± := comm_ring_to_ops Œ≥ in
have add_eq : Œ±.add = Œ≥.add, from rfl, 
have zero_eq : Œ±.zero = Œ≥.zero, from rfl,
have neg_eq : Œ±.neg = Œ≥.neg, from rfl,
have mul_eq : Œ±.mul = Œ≥.mul, from rfl,
have one_eq : Œ±.one = Œ≥.one, from rfl, 
begin 
  constructor, 
  { rwr add_eq, exact Œ≥.add_assoc },
  { rwr zero_eq, rwr add_eq, exact Œ≥.zero_add },
  { rwr zero_eq, rwr add_eq, exact Œ≥.add_zero },
  { rwr zero_eq, rwr add_eq, rwr neg_eq, exact Œ≥.add_left_inv },
  { rwr add_eq, exact Œ≥.add_comm },
  { rwr mul_eq, exact Œ≥.mul_assoc },
  { rwr mul_eq, rwr one_eq, exact Œ≥.one_mul },
  { rwr mul_eq, rwr one_eq, exact Œ≥.mul_one },
  { rwr mul_eq, exact Œ≥.mul_comm },
  { rwr mul_eq, rwr add_eq, exact Œ≥.left_distrib },
  { rwr mul_eq, rwr add_eq, exact Œ≥.right_distrib }
end 

@[hott, hsimp]
def comm_ring_mk {X : Set} (Œ± : comm_ring_ops X) (Œ≤ : comm_ring_laws Œ±) :
  comm_ring X :=
comm_ring.mk X.struct Œ±.add Œ≤.add_assoc Œ±.zero Œ≤.zero_add Œ≤.add_zero Œ±.neg Œ≤.neg_add
               Œ≤.add_comm Œ±.mul Œ≤.mul_assoc Œ±.one Œ≤.one_mul Œ≤.mul_one 
               Œ≤.right_distrib Œ≤.left_distrib Œ≤.mul_comm

@[hott]
def comm_ring_mk_eta {X : Set} : Œ† (Œ≥ : comm_ring X), 
  Œ≥ = comm_ring_mk (comm_ring_to_ops Œ≥) (comm_ring_to_laws Œ≥) := 
assume Œ≥, 
have is_prop_struct : is_prop (is_set X), from is_prop_is_trunc 0 X,  
have p : X.struct = Œ≥.is_set_carrier, from is_prop.elim _ _,    
begin
  hinduction Œ≥,
  hsimp, rwr p 
end                     

@[hott]
def comm_ring_ops_eq_to_eq {X : Set} (Œ≥‚ÇÅ Œ≥‚ÇÇ : comm_ring X) :
  comm_ring_to_ops Œ≥‚ÇÅ = comm_ring_to_ops Œ≥‚ÇÇ -> Œ≥‚ÇÅ = Œ≥‚ÇÇ :=
let Œ±‚ÇÅ := comm_ring_to_ops Œ≥‚ÇÅ, Œ±‚ÇÇ := comm_ring_to_ops Œ≥‚ÇÇ,
    Œ≤‚ÇÅ := comm_ring_to_laws Œ≥‚ÇÅ, Œ≤‚ÇÇ := comm_ring_to_laws Œ≥‚ÇÇ in 
assume p,
let q := pathover_of_tr_eq (is_prop.elim (p ‚ñ∏ Œ≤‚ÇÅ) Œ≤‚ÇÇ) in
(comm_ring_mk_eta Œ≥‚ÇÅ) ‚¨ù (apd011 comm_ring_mk p q) ‚¨ù (comm_ring_mk_eta Œ≥‚ÇÇ)‚Åª¬π

@[hott]
def comm_ring_ops_refl_to_refl {X : Set} (Œ≥ : comm_ring X) : 
  comm_ring_ops_eq_to_eq Œ≥ Œ≥ (refl (comm_ring_to_ops Œ≥)) = refl Œ≥ :=
let Œ± := comm_ring_to_ops Œ≥, Œ≤ := comm_ring_to_laws Œ≥, 
    p := idpath Œ±, q := pathover_of_tr_eq (is_prop.elim (p ‚ñ∏ Œ≤) Œ≤), q' := idpatho Œ≤ in     
have r : q = q', from 
  calc q = pathover_of_tr_eq (is_prop.elim (p ‚ñ∏ Œ≤) Œ≤) : rfl
       ... = pathover_of_tr_eq (refl Œ≤) : by hsimp
       ... = q' : rfl,    
calc comm_ring_ops_eq_to_eq Œ≥ Œ≥ (refl Œ±) =
          (comm_ring_mk_eta Œ≥) ‚¨ù (apd011 comm_ring_mk p q) ‚¨ù (comm_ring_mk_eta Œ≥)‚Åª¬π : rfl
     ... = (comm_ring_mk_eta Œ≥) ‚¨ù (apd011 comm_ring_mk p q') ‚¨ù (comm_ring_mk_eta Œ≥)‚Åª¬π : 
           by rwr r
     ... = (comm_ring_mk_eta Œ≥) ‚¨ù idp ‚¨ù (comm_ring_mk_eta Œ≥)‚Åª¬π : rfl
     ... = (comm_ring_mk_eta Œ≥) ‚¨ù (comm_ring_mk_eta Œ≥)‚Åª¬π : con_idp _
     ... = idp : con.right_inv _     

@[hott]
def comm_ring_hom.map_neg {X Y : Set} {Œ≥‚ÇÅ : comm_ring X} {Œ≥‚ÇÇ : comm_ring Y} 
  {f : X -> Y} (hom_str : is_ring_hom Œ≥‚ÇÅ Œ≥‚ÇÇ f) : ‚àÄ a : X, f (-a) = -(f a) :=
assume a,  
calc f (-a) = 0 + f (-a) : (@comm_ring.zero_add _ Œ≥‚ÇÇ (f (-a)))‚Åª¬π
     ... = (-(f a) + f a) + f (-a) : ap (Œª b : Y, @comm_ring.add _ Œ≥‚ÇÇ b (f (-a))) 
                                        (@comm_ring.add_left_inv _ Œ≥‚ÇÇ (f a))‚Åª¬π
     ... = -(f a) + (f a + f (-a)) : @comm_ring.add_assoc _ Œ≥‚ÇÇ _ _ _
     ... = -(f a) + (f (-a) + f a) : ap (Œª b : Y, @comm_ring.add _ Œ≥‚ÇÇ (-(f a)) b) 
                                        (@comm_ring.add_comm _ Œ≥‚ÇÇ _ _)
     ... = -(f a) + f (-a + a) : by rwr hom_str.map_add 
     ... = -(f a) + f 0 : ap (Œª b : X, @comm_ring.add _ Œ≥‚ÇÇ (-(f a)) (f b))
                           (@comm_ring.add_left_inv _ Œ≥‚ÇÅ a) 
     ... = -(f a) + 0 : by rwr hom_str.map_zero                                                                                              
     ... = -(f a) : @comm_ring.add_zero _ Œ≥‚ÇÇ (-(f a))   

@[hott]
def comm_ring_hom.id_neg_refl {X : Set} {Œ≥ : comm_ring X} :
  comm_ring_hom.map_neg (id_ring_hom Œ≥) = Œª a : X, idpath (-a) :=
have H : ‚àÄ a : X, comm_ring_hom.map_neg (id_ring_hom Œ≥) a = idpath (-a), from 
  assume a, is_set.elim _ _,  
eq_of_homotopy.{u u} H

@[hott]
def ring_hom_is_std_str {R : Set.{u}} (Œ± Œ≤ : comm_ring_set R) : 
  (ring_hom_prop Œ± Œ≤ (ùüô R) √ó ring_hom_prop Œ≤ Œ± (ùüô R)) ‚âÉ Œ± = Œ≤ :=
begin
  fapply equiv.mk, 
  /- `F : ‚Ü•(ring_hom_prop Œ± Œ≤ (ùüô R)) √ó ‚Ü•(ring_hom_prop Œ≤ Œ± (ùüô R)) ‚Üí Œ± = Œ≤` -/
  { intro H,
    let Œ±‚ÇÅ := comm_ring_to_ops Œ±, let Œ≤‚ÇÅ := comm_ring_to_ops Œ≤,
    fapply comm_ring_ops_eq_to_eq Œ± Œ≤,
    change comm_ring_ops.mk Œ±‚ÇÅ.add Œ±‚ÇÅ.zero Œ±‚ÇÅ.neg Œ±‚ÇÅ.mul Œ±‚ÇÅ.one = 
           comm_ring_ops.mk Œ≤‚ÇÅ.add Œ≤‚ÇÅ.zero Œ≤‚ÇÅ.neg Œ≤‚ÇÅ.mul Œ≤‚ÇÅ.one,
    fapply ap_5,       
    { exact eq_of_homotopy2 H.1.map_add },
    { exact H.1.map_zero },
    { exact eq_of_homotopy (comm_ring_hom.map_neg H.1) },
    { exact eq_of_homotopy2 H.1.map_mul },
    { exact H.1.map_one } },
  { fapply adjointify,
    /- `G : Œ± = Œ≤ -> ‚Ü•(ring_hom_prop Œ± Œ≤ (ùüô R)) √ó ‚Ü•(ring_hom_prop Œ≤ Œ± (ùüô R))` -/ 
    { intro p, rwr p, exact (id_ring_hom Œ≤, id_ring_hom Œ≤) },
    /- r_inv : `‚àÄ p : Œ± = Œ≤, F (G p) = p` -/
    { intro p, hinduction p, rwr idp_inv, rwr idp_tr, hsimp, 
      let Œ±‚ÇÅ := comm_ring_to_ops Œ±,
      have p‚ÇÅ : eq_of_homotopy2 (id_ring_hom Œ±).map_add = refl Œ±‚ÇÅ.add, from 
        begin 
          change eq_of_homotopy2 (Œª r s : R, refl (Œ±‚ÇÅ.add r s)) = refl Œ±‚ÇÅ.add, 
          exact eq_of_homotopy2_id Œ±‚ÇÅ.add 
        end,
      have p‚ÇÇ : (id_ring_hom Œ±).map_zero = refl Œ±‚ÇÅ.zero, from rfl,
      have p‚ÇÉ : eq_of_homotopy (comm_ring_hom.map_neg (id_ring_hom Œ±)) = idpath Œ±‚ÇÅ.neg, from 
        begin rwr comm_ring_hom.id_neg_refl, exact eq_of_homotopy_idp Œ±‚ÇÅ.neg end,
      have p‚ÇÑ : eq_of_homotopy2 (id_ring_hom Œ±).map_mul = refl Œ±‚ÇÅ.mul, from 
        begin 
          change eq_of_homotopy2 (Œª r s : R, refl (Œ±‚ÇÅ.mul r s)) = refl Œ±‚ÇÅ.mul, 
          exact eq_of_homotopy2_id Œ±‚ÇÅ.mul 
        end,
      have p‚ÇÖ : (id_ring_hom Œ±).map_one = refl Œ±‚ÇÅ.one, from rfl,
      rwr p‚ÇÅ, rwr p‚ÇÇ, rwr p‚ÇÉ, rwr p‚ÇÑ, rwr p‚ÇÖ, hsimp,
      rwr comm_ring_ops_refl_to_refl Œ± },
    /- l_inv : `‚àÄ H : ‚Ü•(ring_hom_prop Œ± Œ≤ (ùüô R)) √ó ‚Ü•(ring_hom_prop Œ≤ Œ± (ùüô R)), G (F H) = H` -/
    { intro H, exact is_prop.elim _ _ } }
end    

/- The category of commutative rings, as the category of `comm_ring`-structures on sets -/
@[hott]
def comm_ring_str : std_structure_on Set :=
  std_structure_on.mk comm_ring_set @ring_hom_prop @id_ring_hom_set @comp_ring_hom_set 
                      @ring_hom_is_std_str                                          

@[hott, reducible] 
def CommRing := std_structure comm_ring_str

@[hott]
def CommRing.mk (carrier : Set) (comm_ring_str : comm_ring carrier) : CommRing :=
  std_structure.mk carrier comm_ring_str

@[hott]
instance CommRing_to_Set : has_coe CommRing Set :=
  ‚ü®Œª R : CommRing, R.carrier‚ü©

@[hott]
instance CommRing_to_Type : has_coe_to_sort CommRing :=
  has_coe_to_sort.mk (Type u) (Œª R : CommRing, R.carrier)  

@[hott]
instance (R : CommRing) : comm_ring ‚Ü•R.carrier := R.str  

/- A criterion to decide whether a subset of a commutative ring given by a predicate is a
   commutative (sub)ring : The ring operation are closed under the predicate. -/ 
@[hott]
class ring_pred_closed {R : CommRing} (P : Subset R.carrier) :=
  (add : ‚àÄ r s : R, P r -> P s -> P (r + s)) 
  (zero : P 0) 
  (neg : ‚àÄ r : R, P r -> P (-r))
  (mul : ‚àÄ r s : R, P r -> P s -> P (r * s)) 
  (one : P 1)

@[hott]   
def comm_subring {R : CommRing} (P : Subset R.carrier) [ring_pred_closed P] : 
  comm_ring ‚Ü•P :=
begin  
  fapply @comm_ring_mk (pred_Set P),
  { fapply comm_ring_ops.mk, 
    { intros r s, exact ‚ü®r.1 + s.1, ring_pred_closed.add r.1 s.1 r.2 s.2‚ü© }, --add
    { exact ‚ü®0, ring_pred_closed.zero P‚ü© }, --zero
    { intro r, exact ‚ü®-r.1, ring_pred_closed.neg r.1 r.2‚ü© }, --neg
    { intros r s, exact ‚ü®r.1 * s.1, ring_pred_closed.mul r.1 s.1 r.2 s.2‚ü© }, --mul
    { exact ‚ü®1, ring_pred_closed.one P‚ü© } }, --one
  { fapply comm_ring_laws.mk, 
    { intros r s t, hsimp, apply sigma_Prop_eq, hsimp, 
      exact comm_ring.add_assoc r.1 s.1 t.1 }, --add_assoc 
    { intro r, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.zero_add r.1 }, --zero_add
    { intro r, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.add_zero r.1 }, --add_zero 
    { intro r, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.add_left_inv r.1 }, --add_left_inv 
    { intros r s, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.add_comm r.1 s.1 },  --add_comm 
    { intros r s t, hsimp, apply sigma_Prop_eq, hsimp, 
      exact comm_ring.mul_assoc r.1 s.1 t.1 }, --mul_assoc
    { intro r, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.one_mul r.1 }, --one_mul 
    { intro r, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.mul_one r.1 }, --mul_one 
    { intros r s, hsimp, apply sigma_Prop_eq, hsimp, exact comm_ring.mul_comm r.1 s.1 }, --mul_comm
    { intros r s t, hsimp, apply sigma_Prop_eq, hsimp, 
      exact comm_ring.left_distrib r.1 s.1 t.1 }, --left_distrib 
    { intros r s t, hsimp, apply sigma_Prop_eq, hsimp, 
      exact comm_ring.right_distrib r.1 s.1 t.1 }, } --right_distrib
end  

@[hott]
def CommSubring {R : CommRing} (P : Subset R.carrier) [ring_pred_closed P] : CommRing :=
  CommRing.mk (pred_Set P) (comm_subring P)

@[hott]
def CommSubring.to_Subset {R : CommRing} (P : Subset R.carrier) [ring_pred_closed P] : 
  Subset R.carrier :=
{r ‚àà R.carrier | P r}    

/- The embedding of the underlying subset of a subring into the underlying set of the ring is a 
   ring homomorphism. -/
@[hott]
def comm_subring_embed_hom {R : CommRing} (P : Subset R.carrier) [ring_pred_closed P]:
  comm_ring_str.H (CommSubring P).str R.str (pred_Set_map (CommSubring.to_Subset P)) :=
begin 
  fapply is_ring_hom.mk, 
  { refl },
  { intros r s, refl },
  { refl },
  { intros r s, refl }
end     

/- Units of a ring as a bundled structure. Since for a given ring element there is at most a 
   unique inverse we can also define a predicate identifying invertible ring elements. -/
@[hott]
structure units (R : CommRing) :=
(val : R)
(inv : R)
(val_inv : val * inv = 1)

namespace units

@[hott] 
instance (R : CommRing) : has_coe (units R) R := ‚ü®val‚ü©

end units

open units

@[hott]
def unique_mul_inv {R : CommRing.{u}} (r : R) : is_prop (Œ£ (u : units R), r = u) :=
begin 
  fapply is_prop.mk, intros x y, fapply sigma_eq, 
  { hinduction x.1, hinduction y.1, 
    have H : val = val_1, from
    begin
      have p : x.1.val = val, from ap units.val _h, 
      rwr <- p, change ‚Üë(x.1) = val_1, rwr <- x.2, 
      have q : y.1.val = val_1, from ap units.val _h_1, 
      rwr <- q, change r = ‚Üë(y.1), rwr <- y.2
    end, 
    have H' : inv = inv_1, from 
      calc inv = inv * 1 : (comm_ring.mul_one inv)‚Åª¬π
           ... = inv * (val_1 * inv_1) : by rwr val_inv_1
           ... = inv * (val * inv_1) : by rwr H
           ... = (inv * val) * inv_1 : (comm_ring.mul_assoc inv val inv_1)‚Åª¬π
           ... = (val * inv) * inv_1 : ap (Œª r : R, r * inv_1) (comm_ring.mul_comm inv val)
           ... = 1 * inv_1 : by rwr val_inv
           ... = inv_1 : comm_ring.one_mul inv_1, 
    fapply apd001 units.mk, 
    { exact H },
    { exact H' },
    { apply pathover_of_tr_eq, exact is_set.elim _ _ } },
  { apply pathover_of_tr_eq, exact is_set.elim _ _ } 
end

@[hott]
def is_unit {R : CommRing} (r : R) : trunctype -1 :=
  trunctype.mk (Œ£ (u : units R), r = u) (unique_mul_inv r)

@[hott]
class local_ring (R : CommRing) :=
  (nontrivial : ¬¨ (0 = 1))
  (is_local : ‚àÄ r : R, (is_unit r) or (is_unit (1 - r)))

/- For the constructions of limits and colimits of rings over diagrams in arbitrary universe 
   levels we need to lift the universe level of commutative rings. -/
@[hott]
def CommRing_ulift : CommRing.{u} -> CommRing.{(max u' u)} :=
begin
  intro R, fapply CommRing.mk,
  { exact trunctype_ulift R.carrier },
  { let Œ± := comm_ring_to_ops R.str,
    fapply comm_ring_mk, 
    { fapply comm_ring_ops.mk, 
      { intros r s, exact ulift.up (Œ±.add (ulift.down r) (ulift.down s)) }, --add
      { exact ulift.up Œ±.zero }, --zero
      { intro r, exact ulift.up (Œ±.neg (ulift.down r)) }, --neg
      { intros r s, exact ulift.up (Œ±.mul (ulift.down r) (ulift.down s)) }, --mul
      { exact ulift.up Œ±.one }, }, --one
    { fapply comm_ring_laws.mk, 
      { intros r s t, hsimp, rwr R.str.add_assoc }, --add_assoc
      { intro r, hsimp, rwr R.str.zero_add, change ulift.up (ulift.down r) = r, 
        induction r, refl }, --zero_add
      { intro r, hsimp, rwr R.str.add_zero, change ulift.up (ulift.down r) = r, 
        induction r, refl }, --add_zero
      { intro r, hsimp, rwr R.str.add_left_inv }, --neg_add
      { intros r s, hsimp, rwr R.str.add_comm }, --add_comm
      { intros r s t, hsimp, rwr R.str.mul_assoc }, --mul_assoc
      { intro r, hsimp, rwr R.str.one_mul, change ulift.up (ulift.down r) = r, 
        induction r, refl }, --one_mul
      { intro r, hsimp, rwr R.str.mul_one, change ulift.up (ulift.down r) = r, 
        induction r, refl }, --mul_one
      { intros r s, hsimp, rwr R.str.mul_comm }, --mul_comm
      { intros r s t, hsimp, rwr R.str.left_distrib }, --left_distrib
      { intros r s t, hsimp, rwr R.str.right_distrib } } } --right_distrib
end    

@[hott]
def ring_ulift_functor : CommRing.{u} ‚•§ CommRing.{(max u' u)} :=
begin
  fapply categories.functor.mk,
  { exact CommRing_ulift },
  { intros R S f, fapply dpair, 
    { intro r, exact ulift.up (f.1 r.down) },
    { apply prop_to_prop_resize, fapply is_ring_hom.mk, 
      { apply hott.eq.inverse, apply down_eq_up, 
        apply ((prop_resize_to_prop f.2).map_one)‚Åª¬π }, 
      { intros r s, apply ap ulift.up, 
        apply ((prop_resize_to_prop f.2).map_mul) }, 
      { apply hott.eq.inverse, apply down_eq_up, 
        apply ((prop_resize_to_prop f.2).map_zero)‚Åª¬π }, 
      { intros r s, apply ap ulift.up, 
        apply ((prop_resize_to_prop f.2).map_add) } } },
  { intro R, apply hom_eq_C_std, apply eq_of_homotopy, 
    intro r, apply hott.eq.inverse, apply down_eq_up, refl }, 
  { intros R S T f g, apply hom_eq_C_std, apply eq_of_homotopy, 
    intro r, apply hott.eq.inverse, apply down_eq_up, refl } 
end  

end algebra

end hott